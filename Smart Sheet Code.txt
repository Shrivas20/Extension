<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<extensions>
<extension service="Zoho Cliq">
<name><![CDATA[Smart Sheet]]></name>
<description><![CDATA[to connect Cliq with Smartsheet]]></description>
<photoid>2305843009213698245_385250_1651660791460</photoid>
<developer>769082563</developer>
<version>4.4</version>
<appid>4294</appid>
<emailid>shrivassatheesh@gmail.com</emailid>
<connections>
<connection>
<name><![CDATA[test1]]></name>
<servicename><![CDATA[smartsheet]]></servicename>
<details><![CDATA[{"connectionLinkName":"test1","userAccess":"true","scopes":["ADMIN_SHEETS","ADMIN_SIGHTS","ADMIN_USERS","ADMIN_WEBHOOKS","ADMIN_WORKSPACES","CREATE_SHEETS","READ_CONTACTS","READ_EVENTS","READ_USERS","WRITE_SHEETS","READ_SHEETS"],"connectionName":"Test1","serviceName":"smartsheet","connectedServiceId":"657375000000062003","isUserDefinedService":"true"}]]></details>
</connection>
<connection>
<name><![CDATA[storage]]></name>
<servicename><![CDATA[zlabs_integration]]></servicename>
<details><![CDATA[{"connectionLinkName":"storage","userAccess":"true","scopes":["ZohoCliq.StorageData.ALL"],"connectionName":"Storage","serviceName":"zlabs_integration","connectedServiceId":"5000000034021177","isUserDefinedService":"false"}]]></details>
</connection>
</connections>
<executors>
<executor>
<handlertype>3001</handlertype>
<type>0</type>
<script><![CDATA[response = Map();
c = Collection();
cardlist = List();
cardmap = Map();
if(body.containsKey("challenge"))
{
	challengeid = body.get("challenge");
	header_data = Map();
	header_data.put("Content-Type","application/json");
	parm = Map();
	response.put("type","webhook_response");
	token = Map();
	token.put("smartsheetHookResponse",challengeid);
	response.put("body",token.toString());
	return response;
}
else
{
	l = List();
	info body;
	count = 1;
	webhookid = body.get("webhookId");
	sheetid = body.get("scopeObjectId");
	criteraval = sheetid + "_ Webhooks";
	for each  element in body.get("events")
	{
		//info element;
		userid = element.get("userId");
		info userid;
		if(element.get("eventType") == "created")
		{
			response1 = invokeurl
			[
				url :"https://api.smartsheet.com/2.0/sheets/" + sheetid
				type :GET
				connection:"test1"
			];
			Sheetname = response1.get("name");
			rowid = element.get("rowId");
			info rowid;
			userid = element.get("userId");
			if(c.containsValue(rowid))
			{
				continue;
			}
			else
			{
				response_map1 = zoho.cliq.getRecords("equivalentcolumns",{"criteria":"field==" + criteraval},"storage");
				c.insert(rowid);
				taskid = response_map1.get("list").get(0).get("taskid");
				duedateid = response_map1.get("list").get(0).get("duedateid");
				assigneeid = response_map1.get("list").get(0).get("assigneeid");
				Duedate = response_map1.get("list").get(0).get("duedate");
				AssigneeName = response_map1.get("list").get(0).get("assignee");
				TaskName = response_map1.get("list").get(0).get("task");
				response1 = invokeurl
				[
					url :"https://api.smartsheet.com/2.0/sheets/" + sheetid
					type :GET
					connection:"test1"
				];
				for each  element in response1.get("rows")
				{
					info element;
					if(element.get("id") == rowid)
					{
						//info element;
						for each  ele in element.get("cells")
						{
							if(ele.get("columnId") == taskid)
							{
								taskvalue = ele.get("value");
								info taskvalue;
							}
							if(ele.get("columnId") == duedateid)
							{
								if(ele.get("value") == NULL)
								{
									duedatevalue = "-";
								}
								else
								{
									date = ele.get("value").toDate();
									duedatevalue = date;
								}
							}
							if(ele.get("columnId") == assigneeid)
							{
								if(ele.get("value") == NULL)
								{
									assigneevalue = "Not Assigned";
								}
								else
								{
									assigneevalue = ele.get("displayValue");
								}
							}
							username = invokeurl
							[
								url :"https://api.smartsheet.com/2.0/users/" + userid
								type :GET
								connection:"test1"
							];
							currusername = invokeurl
							[
								url :"https://api.smartsheet.com/2.0/users/me"
								type :GET
								connection:"test1"
							];
							usernameval = currusername.get("firstName") + " " + currusername.get("lastName");
							name = username.get("firstName") + " " + username.get("lastName");
							if(username.get("id") == userid)
							{
								//info username;
								if(assigneevalue == "Not Assigned")
								{
									card = {"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"card":{"theme":"modern-inline"},"text":name + " has created a new task *" + taskvalue + "* in Smart Sheet's *" + Sheetname + "* "};
								}
								else
								{
									card = {"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"card":{"theme":"modern-inline"},"text":name + " has created a new task *" + taskvalue + "* in Smart Sheet's *" + Sheetname + "* and assigned to " + assigneevalue};
								}
							}
							else
							{
								if(assigneevalue == "Not Assigned")
								{
									card = {"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"card":{"theme":"modern-inline"},"text":usernameval + " has created a new task *" + taskvalue + "* in Smart Sheet's *" + Sheetname};
								}
								else
								{
									card = {"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"card":{"theme":"modern-inline"},"text":usernameval + " has created a new task *" + taskvalue + "* in Smart Sheet's *" + Sheetname + " and assigned to " + assigneevalue};
								}
							}
						}
					}
					else
					{
						continue;
					}
				}
				cardmap.put(count,card);
				count = count + 1;
			}
		}
		else if(element.get("eventType") == "updated")
		{
			info element;
			rowid = element.get("rowId");
			info rowid;
			columnid = element.get("columnId");
			userid = element.get("userId");
			info userid;
			response_map1 = zoho.cliq.getRecords("equivalentcolumns",{"criteria":"field==" + criteraval},"storage");
			response_map2 = zoho.cliq.getRecords("additionalfields",{"criteria":"field==" + criteraval},"storage");
			taskid = response_map1.get("list").get(0).get("taskid");
			duedateid = response_map1.get("list").get(0).get("duedateid");
			statusid = response_map1.get("list").get(0).get("statusid");
			status = response_map1.get("list").get(0).get("status");
			assigneeid = response_map1.get("list").get(0).get("assigneeid");
			Duedate = response_map1.get("list").get(0).get("duedate");
			AssigneeName = response_map1.get("list").get(0).get("assignee");
			TaskName = response_map1.get("list").get(0).get("task");
			notes = response_map2.get("list").get(0).get("notes");
			notesid = response_map2.get("list").get(0).get("notesid");
			addone = response_map2.get("list").get(0).get("addone");
			addtwo = response_map2.get("list").get(0).get("addtwo");
			addthree = response_map2.get("list").get(0).get("addthree");
			addoneid = response_map2.get("list").get(0).get("addoneid");
			addtwoid = response_map2.get("list").get(0).get("addtwoid");
			addthreeid = response_map2.get("list").get(0).get("addthreeid");
			response1 = invokeurl
			[
				url :"https://api.smartsheet.com/2.0/sheets/" + sheetid
				type :GET
				connection:"test1"
			];
			Sheetname = response1.get("name");
			//info response1;
			for each  element1 in response1.get("rows")
			{
				if(element1.get("id") == rowid)
				{
					info "hello";
					info element1;
					for each  ele in element1.get("cells")
					{
						//info ele;
						info count;
						if(ele.get("columnId") == taskid)
						{
							taskvalue = ele.get("value");
							info taskvalue;
						}
						if(ele.get("columnId") == duedateid)
						{
							if(ele.get("value") == NULL)
							{
								duedatevalue = "-";
							}
							else
							{
								date = ele.get("value").toDate();
								duedatevalue = date;
							}
						}
						if(ele.get("columnId") == assigneeid)
						{
							if(ele.get("value") == NULL)
							{
								assigneevalue = "Not Assigned";
							}
							else
							{
								assigneevalue = ele.get("displayValue");
							}
						}
						if(ele.get("columnId") == statusid)
						{
							if(ele.get("value") == NULL)
							{
								Status = "-";
							}
							else
							{
								Status = ele.get("value");
							}
						}
						if(ele.get("columnId") == notesid)
						{
							if(ele.get("value") == NULL)
							{
								notesval = "-";
							}
							else
							{
								notesval = ele.get("value");
							}
						}
						if(ele.get("columnId") == addoneid)
						{
							if(ele.get("value") == NULL)
							{
								addoneval = "-";
							}
							else
							{
								addoneval = ele.get("value");
							}
						}
						if(ele.get("columnId") == addtwoid)
						{
							if(ele.get("value") == NULL)
							{
								addtwoval = "-";
							}
							else
							{
								addtwoval = ele.get("value");
							}
						}
						if(ele.get("columnId") == addthreeid)
						{
							if(ele.get("value") == NULL)
							{
								addthreeval = "-";
							}
							else
							{
								addthreeval = ele.get("value");
							}
						}
						username = invokeurl
						[
							url :"https://api.smartsheet.com/2.0/users/" + userid
							type :GET
							connection:"test1"
						];
						currusername = invokeurl
						[
							url :"https://api.smartsheet.com/2.0/users/me"
							type :GET
							connection:"test1"
						];
						usernameval = currusername.get("firstName") + " " + currusername.get("lastName");
						info username;
						info username.get("firstName") + " " + username.get("lastName");
						if(username.get("id") == userid)
						{
							name = username.get("firstName") + " " + username.get("lastName");
							//info name;
							if(columnid == taskid)
							{
								if(assigneevalue == "Not Assigned")
								{
									card = {"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"card":{"theme":"modern-inline"},"text":name + " has updated the task *" + taskvalue + "* in Smart Sheet's *" + Sheetname + "*"};
								}
								else
								{
									card = {"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"card":{"theme":"modern-inline"},"text":name + " has updated the task  *" + taskvalue + "* in Smart Sheet's *" + Sheetname + "* and assigned to " + assigneevalue};
								}
								cardmap.put(count,card);
							}
							else if(columnid == assigneeid)
							{
								card = {"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"card":{"theme":"modern-inline"},"text":name + " has updated the task *" + taskvalue + "* in Smart Sheet's *" + Sheetname + "* assignee to " + assigneevalue};
								cardmap.put(count,card);
							}
							else if(columnid == duedateid)
							{
								card = {"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"card":{"theme":"modern-inline"},"text":name + " has updated the task *" + taskvalue + "* in Smart Sheet's *" + Sheetname + "* Due date to " + duedatevalue};
								cardmap.put(count,card);
							}
							else if(columnid == statusid)
							{
								card = {"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"card":{"theme":"modern-inline"},"text":name + " has updated the task *" + taskvalue + "* in Smart Sheet's *" + Sheetname + "* status to " + Status};
								cardmap.put(count,card);
							}
							else if(columnid == notesid)
							{
								card = {"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"card":{"theme":"modern-inline"},"text":name + " has updated the task *" + taskvalue + "* in Smart Sheet's *" + Sheetname + "* notes to " + notesval};
								cardmap.put(count,card);
							}
							else if(columnid == addoneid)
							{
								card = {"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"card":{"theme":"modern-inline"},"text":name + " has updated the task *" + TaskName + "* in Smart Sheet's *" + Sheetname + "* " + addone + " to " + addoneval};
								cardmap.put(count,card);
							}
							else if(columnid == addtwoid)
							{
								card = {"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"card":{"theme":"modern-inline"},"text":name + " has updated the task *" + taskvalue + "* in Smart Sheet's *" + Sheetname + "* " + addtwo + " to " + addtwoval};
								cardmap.put(count,card);
							}
							else if(columnid == addthreeid)
							{
								card = {"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"card":{"theme":"modern-inline"},"text":name + " has updated the task *" + taskvalue + "* in Smart Sheet's *" + Sheetname + "* " + addthree + " to " + addthreeval};
								cardmap.put(count,card);
							}
						}
						else
						{
							if(columnid == taskid)
							{
								if(assigneevalue == "Not Assigned")
								{
									card = {"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"card":{"theme":"modern-inline"},"text":usernameval + " has updated the task *" + taskvalue + "* in Smart Sheet's *" + Sheetname};
								}
								else
								{
									card = {"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"card":{"theme":"modern-inline"},"text":usernameval + " has updated the task  *" + taskvalue + "* in Smart Sheet's *" + Sheetname + "* and assigned to " + assigneevalue};
								}
								cardmap.put(count,card);
							}
							else if(columnid == assigneeid)
							{
								card = {"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"card":{"theme":"modern-inline"},"text":name + " has updated the task *" + taskvalue + "* in Smart Sheet's *" + Sheetname + "* assignee to " + assigneevalue};
								cardmap.put(count,card);
							}
							else if(columnid == duedateid)
							{
								card = {"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"card":{"theme":"modern-inline"},"text":name + " has updated the task *" + taskvalue + "* in Smart Sheet's *" + Sheetname + "* Due date to " + duedatevalue};
								cardmap.put(count,card);
							}
							else if(columnid == statusid)
							{
								card = {"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"card":{"theme":"modern-inline"},"text":name + " has updated the task *" + taskvalue + "* in Smart Sheet's *" + Sheetname + "* status to " + Status};
								cardmap.put(count,card);
							}
							else if(columnid == notesid)
							{
								card = {"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"card":{"theme":"modern-inline"},"text":name + " has updated the task *" + taskvalue + "* in Smart Sheet's *" + Sheetname + "* notes to " + notesval};
								cardmap.put(count,card);
							}
							else if(columnid == addoneid)
							{
								card = {"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"card":{"theme":"modern-inline"},"text":name + " has updated the task *" + taskvalue + "* in Smart Sheet's *" + Sheetname + " " + addone + " to " + addoneval};
								cardmap.put(count,card);
							}
							else if(columnid == addtwoid)
							{
								card = {"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"card":{"theme":"modern-inline"},"text":name + " has updated the task *" + taskvalue + "* in Smart Sheet's *" + Sheetname + "* " + addtwo + " to " + addtwoval};
								cardmap.put(count,card);
							}
							else if(columnid == addthreeid)
							{
								card = {"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"card":{"theme":"modern-inline"},"text":name + " has updated the task *" + taskvalue + "* in Smart Sheet's *" + Sheetname + "* " + addthree + " to " + addthreeval};
								cardmap.put(count,card);
							}
						}
					}
					info cardmap;
					count = count + 1;
				}
			}
		}
		else
		{
			continue;
		}
		cardlist.add(cardmap);
	}
	info cardlist;
	response_map3 = zoho.cliq.getRecords("notifications",{"criteria":"webhookid==" + webhookid},"storage");
	info response_map3;
	channel = response_map3.get("list").get(0).get("uniquename");
	info channel;
	newcardlist = cardlist.distinct();
	for each  card in newcardlist
	{
		for each  i in card
		{
			info i;
			zoho.cliq.postToChannel(channel,i);
		}
	}
}
return response;
]]></script>
<connections>
<connection>
<name><![CDATA[test1]]></name>
<servicename><![CDATA[smartsheet]]></servicename>
<details><![CDATA[{"connectionLinkName":"test1","userAccess":"true","scopes":["ADMIN_SHEETS","ADMIN_SIGHTS","ADMIN_USERS","ADMIN_WEBHOOKS","ADMIN_WORKSPACES","CREATE_SHEETS","READ_CONTACTS","READ_EVENTS","READ_USERS","WRITE_SHEETS","READ_SHEETS"],"connectionName":"Test1","serviceName":"smartsheet","connectedServiceId":"657375000000062003","isUserDefinedService":"true"}]]></details>
</connection>
<connection>
<name><![CDATA[storage]]></name>
<servicename><![CDATA[zlabs_integration]]></servicename>
<details><![CDATA[{"connectionLinkName":"storage","userAccess":"true","scopes":["ZohoCliq.StorageData.ALL"],"connectionName":"Storage","serviceName":"zlabs_integration","connectedServiceId":"5000000034021177","isUserDefinedService":"false"}]]></details>
</connection>
</connections>
</executor>
</executors>
<commands>
<command>
<name>smartsheet</name>
<id>4878936000000106091</id>
<hint><![CDATA[Gets the list of the task]]></hint>
<description/>
<photoid>2305843009213698245-1651457560672</photoid>
<permission><![CDATA[0]]></permission>
<executors>
<executor>
<handlertype>1000</handlertype>
<type>0</type>
<script><![CDATA[r = Map();
// --------> 
useremail = invokeurl
[
	url :"https://api.smartsheet.com/2.0/users/me"
	type :GET
	connection:"test1"
];
emailid = useremail.get("email");
usernameval = useremail.get("firstName") + " " + useremail.get("lastName");
info emailid;
query_mapt = Map();
criteria_stringt = "userid==" + user.get("id");
query_mapt.put("criteria",criteria_stringt);
response_mapt = zoho.cliq.getRecords("equivalentcolumns",query_mapt);
statusid = response_mapt.get("list").get(0).get("statusid");
statusname = response_mapt.get("list").get(0).get("status");
//info statusid;
username = list();
tablerow = Map();
tablerowlist = List();
query_mape = Map();
criteria_stringe = "userid==" + user.get("id");
query_mape.put("criteria",criteria_stringe);
defaultids = zoho.cliq.getRecords("defaultiddb",query_mape).get("list").get(0);
sheetname = defaultids.get("sheet");
sheetid = defaultids.get("sheetid");
// ---------->Gets the data from Equivalent
query_mapt = Map();
criteria_stringt = "userid==" + user.get("id");
query_mapt.put("criteria",criteria_stringt);
EquivalentColumns = zoho.cliq.getRecords("equivalentcolumns",query_mapt).get("list").get(0);
taskid = EquivalentColumns.get("taskid");
taskname = EquivalentColumns.get("task");
assigneeid = EquivalentColumns.get("assigneeid");
// -------------> Gets the data from Additional Columns
query_mapw = Map();
criteria_stringw = "userid==" + user.get("id");
query_mapw.put("criteria",criteria_stringw);
AdditionalColumns = zoho.cliq.getRecords("additionalfields",query_mapw).get("list").get(0);
notesname = AdditionalColumns.get("notes");
notesid = AdditionalColumns.get("notesid");
Duedate = EquivalentColumns.get("duedate");
AssigneeName = EquivalentColumns.get("assignee");
TaskName = EquivalentColumns.get("task");
list = List();
list.add(TaskName);
list.add(Duedate);
list.add(AssigneeName);
if(statusid != 0)
{
	list.add(statusname);
}
addval = List();
if(AdditionalColumns.get("addone") != "NULL")
{
	addval.add(AdditionalColumns.get("addone"));
	list.add(AdditionalColumns.get("addone"));
}
if(AdditionalColumns.get("addtwo") != "NULL")
{
	addval.add(AdditionalColumns.get("addtwo"));
	list.add(AdditionalColumns.get("addtwo"));
}
if(AdditionalColumns.get("addthree") != "NULL")
{
	addval.add(AdditionalColumns.get("addthree"));
	list.add(AdditionalColumns.get("addthree"));
}
//info list;
//info addval;
l = Map();
response1 = invokeurl
[
	url :"https://api.smartsheet.com/2.0/sheets/" + sheetid
	type :GET
	connection:"test1"
];
if(mentions.isEmpty())
{
	info "Empty";
	//info response1;
	rowmap = Map();
	for each  element in response1.get("rows")
	{
		rowid = element.get("id");
		for each  ele in element.get("cells")
		{
			//info ele;
			if(ele.get("columnId") == taskid && !isNull(ele.get("value")))
			{
				taskequivalentname = ele.get("value");
				rowmap.put(taskequivalentname,rowid);
			}
		}
	}
	//info rowmap;
	Column = Map();
	ColumnName = Map();
	ColumnId = Map();
	//To make permalink in the view button of the widget
	columncount = 0;
	for each  column in response1.get("columns")
	{
		columnid = column.get("id");
		columname = column.get("title");
		ColumnName.put(columname,columnid);
		//To get the id of the column using the name
		ColumnId.put(columnid,columname);
		columncount = columncount + 1;
		//To get the name of the column using the column id
	}
	Column = {"getbyName":ColumnName,"getbyID":ColumnId};
	//info Column;
	Rowmap = Map();
	rowid = 1;
	response_map1 = zoho.cliq.getRecords("equivalentcolumns");
	WidgetColumnID = Column.get("getbyID");
	//info WidgetColumnID;
	TaskID = EquivalentColumns.get("taskid");
	//info list;
	for each  row in response1.get("rows")
	{
		//info row;
		Row2 = Map();
		for each  cell in row.get("cells")
		{
			Row1 = Map();
			if(cell.get("columnId") == assigneeid)
			{
				colid = cell.get("columnId").toNumber();
				if(cell.get("value") == emailid)
				{
					username.add(cell.get("displayValue"));
					colval = cell.get("value").toString();
					colname = Column.toMap().get("getbyID").get(colid).toString();
				}
				else
				{
					colval = cell.get("displayValue").toString();
					colname = Column.toMap().get("getbyID").get(colid).toString();
				}
			}
			else
			{
				colid = cell.get("columnId").toNumber();
				colval = cell.get("value").toString();
				colname = Column.toMap().get("getbyID").get(colid).toString();
			}
			//Row1.put("ColumnName",colname);
			//Row1.put("Columnvalue",colval);
			Row2.put(colname,colval);
			//id= id+1;
		}
		//info Row2;
		Rowmap.put(rowid,Row2);
		// To store the rows with the column name and column value 
		rowid = rowid + 1;
	}
	nusername = username.distinct();
	info nusername;
	if(EquivalentColumns.get("statusid") != 0)
	{
		count1 = 0;
		val = 1;
		for each  element in Rowmap
		{
			//info element;
			tablerow = Map();
			elements = list();
			if(element.get(statusname) == "Complete" || element.get(statusname) == "Completed")
			{
				continue;
			}
			//info element.get("Tasks");
			if(element.get(TaskName).isNull() || element.get(AssigneeName).isNull())
			{
				continue;
			}
			//info element;
			if(!element.get(Duedate).isNull())
			{
				date1 = element.get(Duedate).toDate();
				DateChange = date1.toString();
				//info DateChange.toString();
			}
			else
			{
				DateChange = "-";
			}
			if(element.get(AssigneeName).isNull())
			{
				continue;
			}
			else
			{
				if(element.get(AssigneeName) == emailid)
				{
					Assigneename = usernameval;
				}
				else
				{
					continue;
				}
			}
			count1 = count1 + 1;
			if(!element.get(statusname).isNull())
			{
				status = element.get(statusname);
			}
			else
			{
				status = "-";
			}
			info TaskName + " _ " + element.get(TaskName);
			info Duedate + "####" + DateChange;
			//	info AssigneeName + " _ " + element.get(AssigneeName);
			tablerow.put(TaskName,element.get(TaskName));
			//DateChange = toString(DateChange,"dd-MMM-YYYY");
			tablerow.put(Duedate,DateChange);
			tablerow.put(AssigneeName,Assigneename);
			tablerow.put(statusname,status);
			for each  i in addval
			{
				if(element.get(i).isNull())
				{
					addone = "-";
				}
				else
				{
					addone = element.get(i).toString();
				}
				tablerow.put(i,addone);
			}
			val1 = element.get(TaskName);
			//info val1;
			rowidnumber = rowmap.get(val1);
			//info rowidnumber;
			info tablerow;
			tablerowlist.add(tablerow);
			//info tablerowlist;
		}
		info tablerowlist;
	}
	else
	{
		count1 = 0;
		val = 1;
		for each  element in Rowmap
		{
			//info element;
			tablerow = Map();
			elements = list();
			//info element.get("Tasks");
			if(element.get(TaskName).isNull() || element.get(AssigneeName).isNull())
			{
				continue;
			}
			info element;
			if(!element.get(Duedate).isNull())
			{
				date = element.get(Duedate).toDate();
				DateChange = date;
				//info DateChange.toString();
			}
			else
			{
				DateChange = "-";
			}
			if(element.get(AssigneeName).isNull())
			{
				continue;
			}
			else
			{
				if(element.get(AssigneeName) == emailid)
				{
					Assigneename = usernameval;
				}
				else
				{
					continue;
				}
			}
			count1 = count1 + 1;
			info TaskName + " _ " + element.get(TaskName);
			info Duedate + " _ " + DateChange;
			info AssigneeName + " _ " + element.get(AssigneeName);
			tablerow.put(TaskName,element.get(TaskName));
			tablerow.put(Duedate,DateChange);
			tablerow.put(AssigneeName,Assigneename);
			for each  i in addval
			{
				if(element.get(i).isNull())
				{
					addone = "-";
				}
				else
				{
					addone = element.get(i).toString();
				}
				tablerow.put(i,addone);
			}
			val1 = element.get(TaskName);
			//info val1;
			rowidnumber = rowmap.get(val1);
			//info rowidnumber;
			info tablerow;
			tablerowlist.add(tablerow);
			//info tablerowlist;
		}
		info tablerowlist;
	}
	info count1;
	if(count1 > 0)
	{
		response = {"text":"Here are the task assigned for you :task:","card":{"theme":"modern-inline"},"slides":{{"type":"table","title":"","data":{"headers":list,"rows":tablerowlist}}}};
	}
	else
	{
		response = {"text":"There is no task assigned to you"};
	}
}
else
{
	//info mentions.get("email");
	info mentions.get(0).get("email");
	//info response1;
	rowmap = Map();
	for each  element in response1.get("rows")
	{
		rowid = element.get("id");
		for each  ele in element.get("cells")
		{
			//info ele;
			if(ele.get("columnId") == taskid && !isNull(ele.get("value")))
			{
				taskequivalentname = ele.get("value");
				rowmap.put(taskequivalentname,rowid);
			}
		}
	}
	//info rowmap;
	Column = Map();
	ColumnName = Map();
	ColumnId = Map();
	//To make permalink in the view button of the widget
	for each  column in response1.get("columns")
	{
		columnid = column.get("id");
		columname = column.get("title");
		ColumnName.put(columname,columnid);
		//To get the id of the column using the name
		ColumnId.put(columnid,columname);
		//To get the name of the column using the column id
	}
	Column = {"getbyName":ColumnName,"getbyID":ColumnId};
	//info Column;
	Rowmap = Map();
	rowid = 1;
	response_map1 = zoho.cliq.getRecords("equivalentcolumns");
	WidgetColumnID = Column.get("getbyID");
	//info WidgetColumnID;
	TaskID = EquivalentColumns.get("taskid");
	//info list;
	for each  row in response1.get("rows")
	{
		//info row;
		Row2 = Map();
		for each  cell in row.get("cells")
		{
			Row1 = Map();
			if(cell.get("columnId") == assigneeid)
			{
				colid = cell.get("columnId").toNumber();
				if(cell.get("value") == mentions.get(0).get("email"))
				{
					//info user.get("email");
					info cell.get("displayValue");
					username.add(cell.get("displayValue"));
				}
				colval = cell.get("displayValue").toString();
				colname = Column.toMap().get("getbyID").get(colid).toString();
			}
			else
			{
				colid = cell.get("columnId").toNumber();
				colval = cell.get("value").toString();
				colname = Column.toMap().get("getbyID").get(colid).toString();
			}
			//Row1.put("ColumnName",colname);
			//Row1.put("Columnvalue",colval);
			Row2.put(colname,colval);
			//id= id+1;
		}
		//info Row2;
		Rowmap.put(rowid,Row2);
		// To store the rows with the column name and column value 
		rowid = rowid + 1;
	}
	nusername = username.distinct();
	//info nusername;
	if(EquivalentColumns.get("statusid") != 0)
	{
		count1 = 0;
		val = 1;
		for each  element in Rowmap
		{
			//info element;
			tablerow = Map();
			elements = list();
			if(element.get(statusname) == "Complete" || element.get(statusname) == "Completed")
			{
				continue;
			}
			//info element.get("Tasks");
			if(element.get(TaskName).isNull() || element.get(AssigneeName).isNull())
			{
				continue;
			}
			//info element;
			//info element;
			if(!element.get(Duedate).isNull())
			{
				date = element.get(Duedate).toDate();
				DateChange = date;
				//info DateChange.toString();
			}
			else
			{
				DateChange = "-";
			}
			bool = false;
			for each  i in nusername
			{
				if(element.get(AssigneeName) == i)
				{
					bool = true;
					break;
				}
			}
			if(bool == true)
			{
				Assigneename = element.get(AssigneeName);
				//info Assigneename;
			}
			else
			{
				continue;
			}
			count1 = count1 + 1;
			if(!element.get(statusname).isNull())
			{
				status = element.get(statusname);
			}
			else
			{
				status = "-";
			}
			info TaskName + " _ " + element.get(TaskName);
			info Duedate + " _ " + DateChange;
			info AssigneeName + " _ " + element.get(AssigneeName);
			tablerow.put(TaskName,element.get(TaskName));
			tablerow.put(Duedate,DateChange);
			tablerow.put(AssigneeName,Assigneename);
			tablerow.put(statusname,status);
			for each  i in addval
			{
				if(element.get(i).isNull())
				{
					addone = "-";
				}
				else
				{
					addone = element.get(i).toString();
				}
				tablerow.put(i,addone);
			}
			val1 = element.get(TaskName);
			//info val1;
			rowidnumber = rowmap.get(val1);
			//info rowidnumber;
			info tablerow;
			tablerowlist.add(tablerow);
			//info tablerowlist;
		}
		info tablerowlist;
	}
	else
	{
		count1 = 0;
		val = 1;
		for each  element in Rowmap
		{
			//info element;
			tablerow = Map();
			elements = list();
			//info element.get("Tasks");
			if(element.get(TaskName).isNull() || element.get(AssigneeName).isNull())
			{
				continue;
			}
			//info element;
			info element;
			if(!element.get(Duedate).isNull())
			{
				date = element.get(Duedate).toDate();
				DateChange = date;
				//info DateChange.toString();
			}
			else
			{
				DateChange = "-";
			}
			bool = false;
			for each  i in nusername
			{
				if(element.get(AssigneeName) == i)
				{
					bool = true;
					break;
				}
			}
			if(bool == true)
			{
				Assigneename = element.get(AssigneeName);
				info Assigneename;
			}
			else
			{
				continue;
			}
			count1 = count1 + 1;
			info TaskName + " _ " + element.get(TaskName);
			info Duedate + " _ " + DateChange;
			info AssigneeName + " _ " + element.get(AssigneeName);
			tablerow.put(TaskName,element.get(TaskName));
			tablerow.put(Duedate,DateChange);
			tablerow.put(AssigneeName,Assigneename);
			for each  i in addval
			{
				if(element.get(i).isNull())
				{
					addone = "-";
				}
				else
				{
					addone = element.get(i).toString();
				}
				tablerow.put(i,addone);
			}
			val1 = element.get(TaskName);
			//info val1;
			rowidnumber = rowmap.get(val1);
			//info rowidnumber;
			info tablerow;
			tablerowlist.add(tablerow);
			//info tablerowlist;
		}
		info tablerowlist;
	}
	info count1;
	if(count1 > 0)
	{
		response = {"text":"Here are the task assigned for " + mentions.get(0).get("first_name") + " :task:","card":{"theme":"modern-inline"},"slides":{{"type":"table","title":"","data":{"headers":list,"rows":tablerowlist}}}};
	}
	else
	{
		response = {"text":"There is no task assigned for " + mentions.get(0).get("first_name")};
	}
}
return response;
]]></script>
</executor>
<executor>
<handlertype>1001</handlertype>
<type>0</type>
<script><![CDATA[return list();
]]></script>
</executor>
</executors>
</command>
</commands>
<messageactions>
<messageaction>
<name>SmartSheet</name>
<id>4878936000000106093</id>
<hint><![CDATA[Adds task to the the sheet]]></hint>
<permission><![CDATA[0]]></permission>
<executors>
<executor>
<handlertype>4000</handlertype>
<type>0</type>
<script><![CDATA[//The variable message will have the current message for which the action is triggered
r = Map();
response = Map();
query_map = Map();
criteria_string = "userid==" + user.get("id") + " && field==Widget";
query_map.put("criteria",criteria_string);
response_map = zoho.cliq.getRecords("additionalfields",query_map).get("list").get(0);
info response_map.get("notes").isNull();
if(response_map.get("notesid") == 0)
{
	response.put("text","Smart Sheet Message action will work only if you configure the notes Equivalent and its very easy");
}
else
{
	info message;
	messageType = message.get("text");
	info messageType;
	r = Map();
	response = Map();
	query_map = Map();
	criteria_string = "userid==" + user.get("id") + " && field==Widget";
	query_map.put("criteria",criteria_string);
	response_map = zoho.cliq.getRecords("equivalentcolumns",query_map);
	//info response_map;
	record_id = -1;
	if(response_map.get("status").equalsIgnoreCase("SUCCESS") && response_map.get("list").size() > 0)
	{
		record_id = response_map.get("list").get(0).get("id");
	}
	//info record_id;
	response_map1 = zoho.cliq.getRecordById("equivalentcolumns",record_id);
	if(record_id == -1)
	{
		response.put("text","Please Configure the Sheet to Cliq");
		return response;
	}
	Taskequivalent = response_map1.get("object").get("task");
	Assigneeequivalent = response_map1.get("object").get("assignee");
	Duedateequivalent = response_map1.get("object").get("duedate");
	info Taskequivalent;
	info Assigneeequivalent;
	info Duedateequivalent;
	query_mape = Map();
	criteria_stringe = "userid==" + user.get("id");
	query_mape.put("criteria",criteria_stringe);
	response_mape = zoho.cliq.getRecords("defaultiddb",query_mape);
	sheetid = response_mape.get("list").get(0).get("sheetid");
	query_mapt = Map();
	criteria_stringt = "userid==" + user.get("id") + " && field==Widget";
	query_mapt.put("criteria",criteria_stringt);
	response_mapt = zoho.cliq.getRecords("equivalentcolumns",query_mapt);
	statusid = response_mapt.get("list").get(0).get("statusid");
	status = response_mapt.get("list").get(0).get("status");
	c = List();
	c.add({"name":"Task","label":Taskequivalent,"placeholder":"Type the " + Taskequivalent + " name","min_length":"0","max_length":"25","mandatory":true,"type":"text"});
	c.add({"type":"native_select","name":"member","label":Assigneeequivalent,"hint":"","placeholder":"Select the Assignee","mandatory":false,"data_source":"contacts"});
	c.add({"name":"date","label":Duedateequivalent,"placeholder":"Select the date","mandatory":false,"type":"date"});
	if(statusid != 0)
	{
		response = invokeurl
		[
			url :"https://api.smartsheet.com/2.0/sheets/" + sheetid
			type :GET
			connection:"test1"
		];
		info sheetid;
		op = Collection();
		for each  element in response.get("columns")
		{
			//info element;
			if(element.get("id") == statusid)
			{
				c1 = element.get("options");
				for each  i in c1
				{
					info i;
					op.add({"label":i,"value":i.replaceAll(" ","_")});
				}
			}
		}
		c.add({"type":"dynamic_select","name":"Sheet","label":status,"hint":" ","placeholder":"Select","mandatory":false,"value":"sid","options":op.toList()});
	}
	query_mapw = Map();
	criteria_stringw = "userid==" + user.get("id") + " && field==Widget";
	query_mapw.put("criteria",criteria_stringw);
	response_mapw = zoho.cliq.getRecords("additionalfields",query_mapw);
	record_idw = 0;
	if(response_mapw.get("status").equalsIgnoreCase("SUCCESS") && response_mapw.get("list").size() > 0)
	{
		record_idw = response_mapw.get("list").get(0).get("id");
	}
	response_mapw = zoho.cliq.getRecordById("additionalfields",record_idw);
	if(response_mapw.get("object").get("notesid") != 0)
	{
		c.add({"type":"textarea","name":"note","label":response_mapw.get("object").get("notes"),"hint":"","placeholder":"Type the " + response_mapw.get("object").get("notes"),"mandatory":false,"value":messageType});
	}
	form = {"type":"form","title":"Create Task","hint":"","name":"CreateTask","version":1,"button_label":"Add Task","action":{"type":"invoke.function","name":"FormFunctions"},"inputs":c};
	return form;
	/*info messages.get("list").toString().get("sender").get("email");
	inputs = list();
	inputs.add({"name":"text","label":"Task Name","placeholder":"Type Your Task Name","min_length":"0","max_length":"25","mandatory":false,"type":"text"});
	inputs.add({"name":"date","label":"Date","placeholder":"Select the Date","mandatory":false,"type":"date"});
	inputs.add({"type":"textarea","name":"note","label":"Add note","hint":"Notes you add goes into your default notebook!","placeholder":"To be done by Tuesday","mandatory":true,"value":messageType});
	form = {"type":"form","title":"Message Action","hint":"","name":"Message Action","version":1,"button_label":"Add Task","action":{"type":"invoke.function","name":"FormFunctions"},"inputs":inputs};
	return form;*/
}
return response;
]]></script>
</executor>
</executors>
<msgprops>
<msgtypes><![CDATA[TEXT]]></msgtypes>
</msgprops>
</messageaction>
</messageactions>
<bots>
<bot>
<name>Smart Sheet</name>
<id>4878936000000106105</id>
<description><![CDATA[Smart Sheet]]></description>
<photoid>2305843009213698245-1651457560697</photoid>
<permission><![CDATA[0]]></permission>
<uniquename>smartsheetz</uniquename>
<permission><![CDATA[0]]></permission>
<executors>
<executor>
<handlertype>9</handlertype>
<type>0</type>
<id>4878936000000106119</id>
<script><![CDATA[r = Map();
response_map = zoho.cliq.getRecords("notifications");
return r;
/*response = Map();
c = Collection();
if(body.containsKey("challenge"))
{
	challengeid = body.get("challenge");
	header_data = Map();
	header_data.put("Content-Type","application/json");
	parm = Map();
	response.put("type","webhook_response");
	token = Map();
	token.put("smartsheetHookResponse",challengeid);
	response.put("body",token.toString());
	return response;
}
else
{
	info body;
	for each  element in body.get("events")
	{
		info element;
		if(element.get("eventType") == "created")
		{
			rowid = element.get("rowId");
			if(c.containsValue(rowid))
			{
				continue;
			}
			else
			{
				response_map1 = invokeurl
				[
					url :"https://cliq.zoho.com/api/v2/storages/equivalentcolumns/records"
					type :GET
					connection:"storage"
				];
				response_map = invokeurl
				[
					url :"https://cliq.zoho.com/api/v2/storages/defaultiddb/records"
					type :GET
					connection:"storage"
				];
				c.insert(rowid);
				sheets = response_map.get("list").get(0).get("sheetid");
				taskid = response_map1.get("list").get(0).get("taskid");
				duedateid = response_map1.get("list").get(0).get("duedateid");
				assigneeid = response_map1.get("list").get(0).get("assigneeid");
				Duedate = response_map1.get("list").get(0).get("duedate");
				AssigneeName = response_map1.get("list").get(0).get("assignee");
				TaskName = response_map1.get("list").get(0).get("task");
				response1 = invokeurl
				[
					url :"https://api.smartsheet.com/2.0/sheets/" + sheets
					type :GET
					connection:"test1"
				];
				for each  element in response1.get("rows")
				{
					if(element.get("id") == rowid)
					{
						for each  ele in element.get("cells")
						{
							if(ele.get("columnId") == taskid)
							{
								taskvalue = ele.get("value");
							}
							if(ele.get("columnId") == duedateid)
							{
								if(ele.get("value") == NULL)
								{
									duedatevalue = "-";
								}
								else
								{
									date = ele.get("value");
									duedatevalue = toString(toDate(date,"yyyy-MM-dd"),"dd/MM/yyyy");
								}
							}
							if(ele.get("columnId") == assigneeid)
							{
								if(ele.get("value") == NULL)
								{
									assigneevalue = "Not Assigned";
								}
								else
								{
									assigneevalue = ele.get("displayValue");
								}
							}
							userid = 3801532765366148;
							username = invokeurl
							[
								url :"https://api.smartsheet.com/2.0/users/" + userid
								type :GET
								connection:"test1"
							];
							//info username;
							card = {"text":"New " + TaskName + " is been created by Shrivas.","bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"slides":{{"type":"label","title":"","data":{{TaskName:taskvalue},{Duedate:duedatevalue},{AssigneeName:assigneevalue}}}}};
						}
					}
				}
			}
		}
		else if(element.get("eventType") == "updated")
		{
			rowid = element.get("rowId");
			columnid = element.get("columnId");
			response_map1 = invokeurl
			[
				url :"https://cliq.zoho.com/api/v2/storages/equivalentcolumns/records"
				type :GET
				connection:"storage"
			];
			response_map = invokeurl
			[
				url :"https://cliq.zoho.com/api/v2/storages/defaultiddb/records"
				type :GET
				connection:"storage"
			];
			sheets = response_map.get("list").get(0).get("sheetid");
			taskid = response_map1.get("list").get(0).get("taskid");
			duedateid = response_map1.get("list").get(0).get("duedateid");
			statusid = response_map1.get("list").get(0).get("statusid");
			status = response_map1.get("list").get(0).get("status");
			notes = response_map1.get("list").get(0).get("notes");
			notesid = response_map1.get("list").get(0).get("notesid");
			assigneeid = response_map1.get("list").get(0).get("assigneeid");
			Duedate = response_map1.get("list").get(0).get("duedate");
			AssigneeName = response_map1.get("list").get(0).get("assignee");
			TaskName = response_map1.get("list").get(0).get("task");
			response1 = invokeurl
			[
				url :"https://api.smartsheet.com/2.0/sheets/" + sheets
				type :GET
				connection:"test1"
			];
			for each  element in response1.get("rows")
			{
				if(element.get("id") == rowid)
				{
					for each  ele in element.get("cells")
					{
						//info ele;
						if(ele.get("columnId") == taskid)
						{
							taskvalue = ele.get("value");
						}
						if(ele.get("columnId") == duedateid)
						{
							if(ele.get("value") == NULL)
							{
								duedatevalue = "-";
							}
							else
							{
								date = ele.get("value");
								duedatevalue = toString(toDate(date,"yyyy-MM-dd"),"dd/MM/yyyy");
							}
						}
						if(ele.get("columnId") == assigneeid)
						{
							if(ele.get("value") == NULL)
							{
								assigneevalue = "Not Assigned";
							}
							else
							{
								assigneevalue = ele.get("value");
							}
						}
						if(ele.get("columnId") == statusid)
						{
							Status = ele.get("value");
						}
						if(ele.get("columnId") == notesid)
						{
							notesval = ele.get("value");
						}
						userid = 3801532765366148;
						username = invokeurl
						[
							url :"https://api.smartsheet.com/2.0/users/" + userid
							type :GET
							connection:"test1"
						];
						//info username;
						if(columnid == taskid)
						{
							card = {"text":TaskName + " is been updated by Shrivas.","bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"slides":{{"type":"label","title":"","data":{{TaskName:taskvalue},{AssigneeName:assigneevalue}}}}};
						}
						else if(columnid == assigneeid)
						{
							card = {"text":TaskName + "'s Assignee is been updated by Shrivas.","bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"slides":{{"type":"label","title":"","data":{{TaskName:taskvalue},{AssigneeName:assigneevalue}}}}};
						}
						else if(columnid == duedateid)
						{
							card = {"text":TaskName + " " + Duedate + " is been updated by Shrivas.","bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"slides":{{"type":"label","title":"","data":{{TaskName:taskvalue},{Duedate:duedatevalue},{AssigneeName:assigneevalue}}}}};
						}
						else if(columnid == statusid)
						{
							card = {"text":TaskName + " " + status + " is been updated by Shrivas.","bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"slides":{{"type":"label","title":"","data":{{TaskName:taskvalue},{status:Status},{AssigneeName:assigneevalue}}}}};
						}
						else if(columnid == notesid)
						{
							card = {"text":TaskName + " " + notes + " is been updated by Shrivas.","bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"slides":{{"type":"label","title":"","data":{{TaskName:taskvalue},{AssigneeName:assigneevalue},{notes:notesval}}}}};
						}
					}
				}
			}
		}
	}
}
info card;
info zoho.cliq.postToChannel("testingchannel",card);
return response;*/
]]></script>
</executor>
<executor>
<handlertype>102</handlertype>
<type>0</type>
<id>4878936000000124019</id>
<script><![CDATA[response = Map();
query_map = Map();
criteria_string = "userid==" + user.get("id");
query_map.put("criteria",criteria_string);
response_ = zoho.cliq.getRecords("weebhookkey",query_map);
response_map1 = zoho.cliq.getRecords("equivalentcolumns",{"criteria":"userid==" + user.get("id")},"storage");
if(sub_action == "Map Sheet")
{
	if(response_.get("status").equalsIgnoreCase("SUCCESS") && response_.get("list").size() == 0)
	{
		response = Map();
		response = {"text":"In order to get all your notifications on the right time, we need access to generate your webhook token. To generate your token, click the given button below.","card":{"title":" ","thumbnail":"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR-F1QLiZwYUpLMUizJHDXKRaqYKPacrqzwEw&usqp=CAU","theme":"prompt"},"buttons":{{"label":"Authorize","hint":"","type":"+","action":{"type":"invoke.function","data":{"name":"Zapikeys","owner":user.get("email")},"confirm":{"title":"Generate Token","description":"Type \"yes\" or Click on Ok!","input":{"type":"user_webhook_token"}}}}}};
		return response;
	}
	else
	{
		response1 = invokeurl
		[
			url :"https://api.smartsheet.com/2.0/sheets"
			type :GET
			connection:"test1"
		];
		info response1;
		totalsheetcount = response1.get("totalCount");
		sheetids = Collection();
		query_mapn = Map();
		criteria_stringn = "userid==" + user.get("id");
		query_mapn.put("criteria",criteria_stringn);
		response_mapn = zoho.cliq.getRecords("notifications",query_mapn);
		totaldbsize = response_mapn.get("list").size();
		info response_mapn;
		if(response_mapn.get("status") == "SUCCESS" && response_mapn.get("list").size() == 0)
		{
			groups1 = response1.toMap();
			for each  group in groups1.get("data")
			{
				if(!isNumber(group))
				{
					sidnumber = group.get("id");
					sheetname = group.get("name").toString();
					sheetids.add({"label":sheetname,"value":sidnumber});
				}
			}
			info sheetids;
			form = {"name":"Notification-subtask-map","type":"form","title":"Map Sheet","button_label":"Next","inputs":{{"type":"dynamic_select","name":"Sheet","label":"Sheets","hint":"Select your default Sheet","placeholder":"1.Task Sheet","mandatory":true,"value":"sid","options":sheetids},{"name":"channels","label":"Channels","placeholder":"Select the channels","multiple":false,"mandatory":true,"type":"native_select","data_source":"channels"}},"action":{"type":"invoke.function","name":"FormFunctions"}};
			return form;
		}
		else
		{
			if(totaldbsize == totalsheetcount)
			{
				response.put("text","There are no sheets to Map");
				return response;
			}
			sheetids = Collection();
			groups1 = response1.toMap();
			for each  group in groups1.get("data")
			{
				if(!isNumber(group))
				{
					sidnumber = group.get("id");
					sheetname = group.get("name").toString();
					bool = false;
					for each  element in response_mapn.get("list")
					{
						//info element;
						sheet_id = element.get("sheetid").toNumber();
						if(sheet_id == sidnumber)
						{
							bool = true;
							break;
						}
					}
					if(bool == false)
					{
						sheetids.add({"label":sheetname,"value":sidnumber});
					}
					else
					{
						continue;
					}
				}
			}
			info sheetids;
			form = {"name":"Notification-subtask-map","type":"form","title":"Map Sheet","button_label":"Next","inputs":{{"type":"dynamic_select","name":"Sheet","label":"Sheets","hint":"Select your default Sheet","placeholder":"1.Task Sheet","mandatory":true,"value":"sid","options":sheetids},{"name":"channels","extension_association":true,"label":"Channels","placeholder":"Select the channels","multiple":false,"mandatory":true,"type":"native_select","data_source":"channels"}},"action":{"type":"invoke.function","name":"FormFunctions"}};
			return form;
		}
	}
}
else if(sub_action == "Unmap Sheet")
{
	response = Map();
	query_mapn = Map();
	criteria_stringn = "userid==" + user.get("id");
	query_mapn.put("criteria",criteria_stringn);
	response_map = zoho.cliq.getRecords("notifications");
	if(response_map.get("list").size() == 0)
	{
		response = {"text":"There are no Sheets Mapped"};
		return response;
	}
	else if(response_map.get("list").size() <= 20)
	{
		response = Map();
		response.put("text","*Mapped Channel Details*");
		/*bot = Map();
		bot.put("name","SmartSheet");
		bot.put("image","https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg");
		response.put("bot",bot);*/
		card = Map();
		card.put("theme","modern-inline");
		response.put("card",card);
		slidesList = list();
		slidesList0 = Map();
		slidesList0.put("type","table");
		slidesList0.put("title"," ");
		data = Map();
		headersList = list();
		headersList.add("Sheet Name");
		headersList.add("Selected Fields");
		headersList.add("Mapped Channel");
		headersList.add("Mapped By");
		headersList.add("Re-Map New Channel");
		headersList.add("Unmap Channel");
		data.put("headers",headersList);
		rowsList = list();
		for each  i in response_map.get("list")
		{
			row = Map();
			selected = "";
			selectfields = i.get("selectedfields").toList();
			for each  ele in selectfields
			{
				if(ele == selectfields.get(0))
				{
					selected = ele;
				}
				else
				{
					selected = selected + " , " + ele;
				}
			}
			row.put("Sheet Name",i.get("sheetname"));
			row.put("Selected Fields",selected);
			row.put("Mapped Channel",i.get("channelname"));
			row.put("Mapped By",i.get("user"));
			webhookid = i.get("webhookid").toNumber();
			if(i.get("userid") == user.get("id"))
			{
				row.put("Re-Map New Channel","[Edit](invoke.function|EditingChannel|scott.fisher@zylker.com|" + webhookid + ") ");
				row.put("Unmap Channel","[Delete](invoke.function|UnmappingChannel|scott.fisher@zylker.com|" + webhookid + ")");
			}
			else
			{
				row.put("Re-Map New Channel","-");
				row.put("Unmap Channel","-");
			}
			rowsList.add(row);
		}
		data.put("rows",rowsList);
		slidesList0.put("data",data);
		slidesList.add(slidesList0);
		response.put("slides",slidesList);
		return response;
	}
	else
	{
		response = Map();
		response.put("text","*Mapped Channel Details*");
		/*bot = Map();
		bot.put("name","SmartSheet");
		bot.put("image","https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg");
		response.put("bot",bot);*/
		card = Map();
		card.put("theme","modern-inline");
		response.put("card",card);
		slidesList = list();
		slidesList0 = Map();
		slidesList0.put("type","table");
		slidesList0.put("title"," ");
		buttonsList = list();
		buttonsList0 = Map();
		buttonsList0.put("label","Next");
		buttonsList0.put("type","+");
		action = Map();
		action.put("type","invoke.function");
		data = Map();
		data.put("name","messagecardnext");
		action.put("data",data);
		buttonsList0.put("action",action);
		buttonsList.add(buttonsList0);
		slidesList0.put("buttons",buttonsList);
		data = Map();
		headersList = list();
		headersList.add("Sheet Name");
		headersList.add("Selected Fields");
		headersList.add("Mapped Channel");
		headersList.add("Mapped By");
		headersList.add("Re-Map New Channel");
		headersList.add("Unmap Channel");
		data.put("headers",headersList);
		rowsList = list();
		count = 0;
		for each  i in response_map.get("list")
		{
			if(count == 20)
			{
				break;
			}
			count = count + 1;
			row = Map();
			selected = "";
			selectfields = i.get("selectedfields").toList();
			for each  ele in selectfields
			{
				if(ele == selectfields.get(0))
				{
					selected = ele;
				}
				else
				{
					selected = selected + " , " + ele;
				}
			}
			row.put("Sheet Name",i.get("sheetname"));
			row.put("Selected Fields",selected);
			row.put("Mapped Channel",i.get("channelname"));
			row.put("Mapped By",i.get("user"));
			webhookid = i.get("webhookid").toNumber();
			if(i.get("userid") == user.get("id"))
			{
				row.put("Re-Map New Channel","[Edit](invoke.function|EditingChannel|scott.fisher@zylker.com|" + webhookid + ") ");
				row.put("Unmap Channel","[Delete](invoke.function|UnmappingChannel|scott.fisher@zylker.com|" + webhookid + ")");
			}
			else
			{
				row.put("Re-Map New Channel","-");
				row.put("Unmap Channel","-");
			}
			rowsList.add(row);
		}
		data.put("rows",rowsList);
		slidesList0.put("data",data);
		slidesList.add(slidesList0);
		response.put("slides",slidesList);
		return response;
	}
}
return response;
]]></script>
<name><![CDATA[Notifications]]></name>
<position><![CDATA[2]]></position>
<sub_actions>
<sub_action>
<name><![CDATA[Map Sheet]]></name>
</sub_action>
<sub_action>
<name><![CDATA[Unmap Sheet]]></name>
</sub_action>
</sub_actions>
</executor>
<executor>
<handlertype>5</handlertype>
<type>0</type>
<id>4878936000000106117</id>
<script><![CDATA[response = Map();
response.put("text","Hi, I am here to help you to integrate cliq with your Smart Sheet Come on let's explore what can I do for you");
/*bot = Map();
bot.put("name","SmartSheet");
bot.put("image","https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg");
response.put("bot",bot);*/
card = Map();
card.put("title","Welcome " + user.get("first_name"));
card.put("thumbnail","https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR-F1QLiZwYUpLMUizJHDXKRaqYKPacrqzwEw&usqp=CAU");
card.put("theme","prompt");
response.put("card",card);
buttonsList = list();
buttonsList0 = Map();
buttonsList0.put("label","Let's Explore");
buttonsList0.put("type","+");
action = Map();
action.put("type","invoke.function");
data = Map();
data.put("name","Welcomehandler");
action.put("data",data);
buttonsList0.put("action",action);
buttonsList.add(buttonsList0);
response.put("buttons",buttonsList);
return response;
]]></script>
</executor>
<executor>
<handlertype>103</handlertype>
<type>0</type>
<id>4878936000000106115</id>
<script><![CDATA[r = Map();
query_mapt = Map();
criteria_stringt = "userid==" + user.get("id") + "&& field==Widget";
query_mapt.put("criteria",criteria_stringt);
response_mapt = zoho.cliq.getRecords("equivalentcolumns",query_mapt);
info response_mapt;
if(response_mapt.get("status").equalsIgnoreCase("SUCCESS") && response_mapt.get("list").size() == 0)
{
	response = Map();
	response.put("text","Configure your *Smart Sheet* to create Task ");
	bot = Map();
	bot.put("name","SmartSheet");
	bot.put("image","https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg");
	response.put("bot",bot);
	card = Map();
	card.put("thumbnail","https://i.ibb.co/0pNJTnY/Screenshot-2022-05-02-123335.png");
	card.put("theme","prompt");
	response.put("card",card);
	buttonsList = list();
	buttonsList0 = Map();
	buttonsList0.put("label","Configure");
	buttonsList0.put("type","+");
	action = Map();
	action.put("type","invoke.function");
	data = Map();
	data.put("name","One");
	action.put("data",data);
	buttonsList0.put("action",action);
	buttonsList.add(buttonsList0);
	response.put("buttons",buttonsList);
	return response;
}
else
{
	response = Map();
	query_map = Map();
	criteria_string = "userid==" + user.get("id") + "&& field==Widget";
	query_map.put("criteria",criteria_string);
	response_map = zoho.cliq.getRecords("equivalentcolumns",query_map);
	//info response_map;
	record_id = -1;
	if(response_map.get("status").equalsIgnoreCase("SUCCESS") && response_map.get("list").size() > 0)
	{
		record_id = response_map.get("list").get(0).get("id");
	}
	//info record_id;
	response_map1 = zoho.cliq.getRecordById("equivalentcolumns",record_id);
	if(record_id == -1)
	{
		response.put("text","Please Configure the Sheet to Cliq");
		return response;
	}
	Taskequivalent = response_map1.get("object").get("task");
	Assigneeequivalent = response_map1.get("object").get("assignee");
	Duedateequivalent = response_map1.get("object").get("duedate");
	info Taskequivalent;
	info Assigneeequivalent;
	info Duedateequivalent;
	query_mape = Map();
	criteria_stringe = "userid==" + user.get("id");
	query_mape.put("criteria",criteria_stringe);
	response_mape = zoho.cliq.getRecords("defaultiddb",query_mape);
	sheetid = response_mape.get("list").get(0).get("sheetid");
	query_mapt = Map();
	criteria_stringt = "userid==" + user.get("id") + "&& field==Widget";
	query_mapt.put("criteria",criteria_stringt);
	response_mapt = zoho.cliq.getRecords("equivalentcolumns",query_mapt);
	statusid = response_mapt.get("list").get(0).get("statusid");
	status = response_mapt.get("list").get(0).get("status");
	c = List();
	c.add({"name":"Task","label":Taskequivalent,"placeholder":"Type the " + Taskequivalent + " name","min_length":"0","max_length":"25","mandatory":true,"type":"text"});
	c.add({"type":"native_select","name":"member","label":Assigneeequivalent,"hint":"","placeholder":"Select the Assignee","mandatory":false,"data_source":"contacts"});
	c.add({"name":"date","label":Duedateequivalent,"placeholder":"Select the date","mandatory":false,"type":"date"});
	if(statusid != 0)
	{
		response = invokeurl
		[
			url :"https://api.smartsheet.com/2.0/sheets/" + sheetid
			type :GET
			connection:"test1"
		];
		info sheetid;
		op = Collection();
		for each  element in response.get("columns")
		{
			//info element;
			if(element.get("id") == statusid)
			{
				c1 = element.get("options");
				for each  i in c1
				{
					info i;
					op.add({"label":i,"value":i.replaceAll(" ","_")});
				}
			}
		}
		c.add({"type":"dynamic_select","name":"Sheet","label":status,"hint":" ","placeholder":"Select","mandatory":false,"value":"sid","options":op.toList()});
	}
	query_mapw = Map();
	criteria_stringw = "userid==" + user.get("id") + "&& field==Widget";
	query_mapw.put("criteria",criteria_stringw);
	response_mapw = zoho.cliq.getRecords("additionalfields",query_mapw);
	record_idw = 0;
	if(response_mapw.get("status").equalsIgnoreCase("SUCCESS") && response_mapw.get("list").size() > 0)
	{
		record_idw = response_mapw.get("list").get(0).get("id");
	}
	response_mapw = zoho.cliq.getRecordById("additionalfields",record_idw);
	if(response_mapw.get("object").get("notesid") != 0)
	{
		c.add({"type":"textarea","name":"note","label":response_mapw.get("object").get("notes"),"hint":"","placeholder":"Type the " + response_mapw.get("object").get("notes"),"mandatory":false,"value":""});
	}
	form = {"type":"form","title":"Create Task","hint":"","name":"CreateTask","version":1,"button_label":"Add Task","action":{"type":"invoke.function","name":"FormFunctions"},"inputs":c};
	return form;
}
]]></script>
<name><![CDATA[Create Task]]></name>
<position><![CDATA[1]]></position>
</executor>
<executor>
<handlertype>101</handlertype>
<type>0</type>
<id>4878936000000106111</id>
<script><![CDATA[response = Map();
query_map = Map();
criteria_string = "userid==" + user.get("id");
query_map.put("criteria",criteria_string);
response_map = zoho.cliq.getRecords("defaultiddb",query_map);
record_id = 0;
if(response_map.get("status").equalsIgnoreCase("SUCCESS") && response_map.get("list").size() > 0)
{
	record_id = response_map.get("list").get(0).get("id");
	response_map1 = zoho.cliq.getRecordById("defaultiddb",record_id);
	info response_map1;
	sheetname = response_map1.get("object").get("sheetname");
	response = Map();
	response.put("text","*Your Default Sheet is " + sheetname + "*");
	/*bot = Map();
	bot.put("name","SmartSheet");
	bot.put("image","https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg");
	response.put("bot",bot);*/
	card = Map();
	card.put("theme","prompt");
	response.put("card",card);
	buttonsList = list();
	buttonsList0 = Map();
	buttonsList0.put("label","Reconfigure");
	buttonsList0.put("type","+");
	action = Map();
	action.put("type","invoke.function");
	data = Map();
	data.put("name","Reconfiguration");
	action.put("data",data);
	buttonsList0.put("action",action);
	buttonsList.add(buttonsList0);
	response.put("buttons",buttonsList);
	return response;
}
else
{
	l = Map();
	//par = {"name":"workspacefromcliq"};
	//header_data = Map();
	//header_data.put("Content-Type","application/json");
	/*response = invokeurl
	[
		url :"https://api.smartsheet.com/2.0/workspaces"
		type :GET
		connection:"test1"
	];*/
	response1 = invokeurl
	[
		url :"https://api.smartsheet.com/2.0/sheets"
		type :GET
		connection:"test1"
	];
	workspaceids = Collection();
	sheetids = Collection();
	/*for each  group in groups.get("data")
	{
		if(!isNumber(group))
		{
			idnumber = group.get("id");
			workspacename = group.get("name").toString();
			workspaceids.add({"label":workspacename,"value":idnumber});
		}
	}*/
	groups1 = response1.toMap();
	for each  group in groups1.get("data")
	{
		if(!isNumber(group))
		{
			sidnumber = group.get("id");
			sheetname = group.get("name").toString();
			sheetids.add({"label":sheetname,"value":sidnumber});
		}
	}
	form = {"name":"Workspace","type":"form","title":"Configurations","hint":"","button_label":"Next","inputs":{{"type":"dynamic_select","name":"Sheet","label":"Sheets","hint":"Select your default Sheet","placeholder":"1.Task Sheet","mandatory":true,"value":"sid","options":sheetids}},"action":{"type":"invoke.function","name":"FormFunctions"}};
	return form;
}
]]></script>
<name><![CDATA[Configure]]></name>
<position><![CDATA[0]]></position>
</executor>
<executor>
<handlertype>0</handlertype>
<type>0</type>
<id>4878936000000106109</id>
<script><![CDATA[response = Map();
return response;
]]></script>
</executor>
</executors>
</bot>
</bots>
<applets>
<applet>
<name>SmartSheets</name>
<id>4878936000000106089</id>
<description><![CDATA[Shows the task]]></description>
<photoid>2305843009213698245-1651457560722</photoid>
<uid><![CDATA[dda2ece2-6cf0-4c3f-bb9c-fdda3f122d0a]]></uid>
<executors>
<executor>
<handlertype>7000</handlertype>
<type>0</type>
<script><![CDATA[a = Map();
r = Map();
sections = list();
username = list();
pagenumber = 2;
// --------->Gets the data from Default Id DB
query_mape = Map();
criteria_stringe = "userid==" + user.get("id");
query_mape.put("criteria",criteria_stringe);
defaultids = zoho.cliq.getRecords("defaultiddb",query_mape).get("list").get(0);
info defaultids;
sheetname = defaultids.get("sheetname");
info sheetname;
sheetid = defaultids.get("sheetid");
info sheetid;
// ---------->Gets the data from Equivalent
query_mapt = Map();
criteria_stringt = "userid==" + user.get("id") + " && field==Widget";
query_mapt.put("criteria",criteria_stringt);
EquivalentColumns = zoho.cliq.getRecords("equivalentcolumns",query_mapt).get("list").get(0);
info EquivalentColumns;
taskid = EquivalentColumns.get("taskid");
taskname = EquivalentColumns.get("task");
assigneeid = EquivalentColumns.get("assigneeid");
statusname = EquivalentColumns.get("status");
info taskid;
info taskname;
info assigneeid;
// -------------> Gets the data from Additional Columns
query_mapw = Map();
criteria_stringw = "userid==" + user.get("id") + " && field==Widget";
query_mapw.put("criteria",criteria_stringw);
AdditionalColumns = zoho.cliq.getRecords("additionalfields",query_mapw).get("list").get(0);
notesname = AdditionalColumns.get("notes");
notesid = AdditionalColumns.get("notesid");
info notesid;
info EquivalentColumns.get("statusid");
addval = List();
if(AdditionalColumns.get("addone") != "NULL")
{
	addval.add(AdditionalColumns.get("addone"));
}
if(AdditionalColumns.get("addtwo") != "NULL")
{
	addval.add(AdditionalColumns.get("addtwo"));
}
if(AdditionalColumns.get("addthree") != "NULL")
{
	addval.add(AdditionalColumns.get("addthree"));
}
//info addval;
l = Map();
useremail = invokeurl
[
	url :"https://api.smartsheet.com/2.0/users/me"
	type :GET
	connection:"test1"
];
emailid = useremail.get("email");
usernameval = useremail.get("firstName") + " " + useremail.get("lastName");
info usernameval;
//info emailid;
response1 = invokeurl
[
	url :"https://api.smartsheet.com/2.0/sheets/" + sheetid
	type :GET
	connection:"test1"
];
//info response1;
rowmap = Map();
for each  element in response1.get("rows")
{
	rowid = element.get("id");
	for each  ele in element.get("cells")
	{
		//info ele;
		if(ele.get("columnId") == taskid && !isNull(ele.get("value")))
		{
			taskequivalentname = ele.get("value").toString();
			rowmap.put(taskequivalentname,rowid);
		}
	}
}
//info rowmap;
Column = Map();
ColumnName = Map();
ColumnId = Map();
permalink = response1.get("permalink").toString();
header = {"title":" Sheet : " + sheetname,"navigation":"new","buttons":{{"label":"Add Task","type":"invoke.function","name":"Widgetaddtaskform","id":"button12"},{"label":"View Sheet","type":"open.url","url":permalink}}};
//To make permalink in the view button of the widget
columncount = 0;
for each  column in response1.get("columns")
{
	columnid = column.get("id");
	columname = column.get("title");
	ColumnName.put(columname,columnid);
	//To get the id of the column using the name
	ColumnId.put(columnid,columname);
	columncount = columncount + 1;
	//To get the name of the column using the column id
}
//info columncount;
Column = {"getbyName":ColumnName,"getbyID":ColumnId};
//info Column;
Rowmapval = Map();
rowid = 1;
list = List();
response_map1 = zoho.cliq.getRecords("equivalentcolumns");
WidgetColumnID = Column.get("getbyID");
//info WidgetColumnID;
TaskID = EquivalentColumns.get("taskid");
Duedate = EquivalentColumns.get("duedate");
AssigneeName = EquivalentColumns.get("assignee");
TaskName = EquivalentColumns.get("task");
//info user.get("email");
list.add(TaskName);
list.add(Duedate);
list.add(AssigneeName);
//info list;
count = 0;
for each  row in response1.get("rows")
{
	//info row;
	rowidval = row.get("id");
	info rowidval;
	Row2 = Map();
	for each  cell in row.get("cells")
	{
		Row1 = Map();
		if(cell.get("columnId") == assigneeid)
		{
			colid = cell.get("columnId").toNumber();
			if(cell.get("value") == emailid)
			{
				count = count + 1;
				username.add(cell.get("displayValue"));
				colval = cell.get("value").toString();
				colname = Column.toMap().get("getbyID").get(colid).toString();
			}
			else
			{
				colval = cell.get("displayValue").toString();
				colname = Column.toMap().get("getbyID").get(colid).toString();
			}
		}
		else
		{
			colid = cell.get("columnId").toNumber();
			colval = cell.get("value").toString();
			colname = Column.toMap().get("getbyID").get(colid).toString();
		}
		//Row1.put("ColumnName",colname);
		//Row1.put("Columnvalue",colval);
		Row2.put(colname,colval);
		Row2.put("Rowid",rowidval);
		//id= id+1;
	}
	//info Row2;
	Rowmapval.put(rowid,Row2);
	// To store the rows with the column name and column value 
	rowid = rowid + 1;
}
nusername = username.distinct();
//info nusername;
info Rowmapval.toString();
if(target.get("id") == "homeTab")
{
	if(EquivalentColumns.get("statusid") == 0 && notesid == 0)
	{
		val = 1;
		count1 = 0;
		for each  element in Rowmapval
		{
			//info element;
			elements = list();
			if(element.get(TaskName).isNull())
			{
				continue;
			}
			//info element.get(TaskName);
			count1 = count1 + 1;
			flag = 0;
			//info element;
			for each  ele in element
			{
				if(ele == NULL)
				{
					flag = flag + 1;
				}
			}
			//info element;
			if(flag == columncount - 1)
			{
				elements.add({"type":"title","text":element.get(TaskName)});
			}
			else
			{
				if(!element.get(Duedate).isNull())
				{
					date = element.get(Duedate).toDate();
					DateChange = date;
					//info DateChange.toString();
				}
				else
				{
					DateChange = "-";
				}
				if(element.get(AssigneeName).isNull())
				{
					Assigneename = "Not Assigned";
				}
				else
				{
					if(element.get(AssigneeName) == emailid)
					{
						Assigneename = usernameval;
					}
					else
					{
						Assigneename = element.get(AssigneeName);
					}
				}
				elements.add({"type":"text","text":TaskName + ": " + element.get(TaskName)});
				elements.add({"type":"text","text":Duedate + ": " + DateChange});
				elements.add({"type":"text","text":AssigneeName + ": " + Assigneename});
				for each  i in addval
				{
					if(element.get(i).isNull())
					{
						addone = "-";
					}
					else
					{
						addone = element.get(i).toString();
					}
					elements.add({"type":"text","text":i + ": " + addone});
				}
				val1 = element.get(TaskName);
				//info val1;
				rowidnumber = element.get("Rowid");
				//info rowidnumber;
				elements.add({"type":"buttons","buttons":{{"label":"View Comments","type":"invoke.function","name":"rowcomments","id":rowidnumber},{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowidnumber}}});
				elements.add({"type":"divider"});
			}
			sections.add({"id":val,"elements":elements});
			val = val + 1;
			//info elements;
		}
		//info count1;
		//info sections;
	}
	else if(EquivalentColumns.get("statusid") == 0 && notesid != 0)
	{
		count1 = 0;
		val = 1;
		for each  element in Rowmapval
		{
			//info element;
			elements = list();
			//info element.get("Tasks");
			if(element.get(TaskName).isNull())
			{
				continue;
			}
			count1 = count1 + 1;
			flag = 0;
			//info element;
			for each  ele in element
			{
				if(ele == NULL)
				{
					flag = flag + 1;
				}
			}
			//info element;
			if(flag == columncount - 1)
			{
				elements.add({"type":"title","text":element.get(TaskName)});
			}
			else
			{
				if(!element.get(Duedate).isNull())
				{
					date = element.get(Duedate).toDate();
					DateChange = date;
					//info DateChange.toString();
				}
				else
				{
					DateChange = "-";
				}
				if(element.get(AssigneeName).isNull())
				{
					Assigneename = "Not Assigned";
				}
				else
				{
					if(element.get(AssigneeName) == emailid)
					{
						Assigneename = usernameval;
					}
					else
					{
						Assigneename = element.get(AssigneeName);
					}
				}
				elements.add({"type":"text","text":TaskName + ": " + element.get(TaskName)});
				elements.add({"type":"text","text":Duedate + ": " + DateChange});
				elements.add({"type":"text","text":AssigneeName + ": " + Assigneename});
				for each  i in addval
				{
					if(element.get(i).isNull())
					{
						addone = "-";
					}
					else
					{
						addone = element.get(i).toString();
					}
					elements.add({"type":"text","text":i + ": " + addone});
				}
				val1 = element.get(TaskName);
				//info val1;
				rowidnumber = element.get("Rowid");
				//info rowidnumber;
				elements.add({"type":"buttons","buttons":{{"label":"View Comments","type":"invoke.function","name":"rowcomments","id":rowidnumber},{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowidnumber},{"label":"View Notes","type":"invoke.function","name":"viewingnotes","id":rowidnumber},{"label":"Add Notes","type":"invoke.function","name":"addingnotes","id":rowidnumber}}});
				elements.add({"type":"divider"});
			}
			sections.add({"id":val,"elements":elements});
			val = val + 1;
			//info elements;
		}
	}
	else if(EquivalentColumns.get("statusid") != 0 && notesid == 0)
	{
		val = 1;
		count1 = 0;
		for each  element in Rowmapval
		{
			//info element;
			if(element.get(statusname) == "Complete" || element.get(statusname) == "Completed")
			{
				continue;
			}
			else
			{
				elements = list();
				//info element.get("Tasks");
				if(element.get(TaskName).isNull())
				{
					continue;
				}
				count1 = count1 + 1;
				flag = 0;
				//info element;
				for each  ele in element
				{
					if(ele == NULL)
					{
						flag = flag + 1;
					}
				}
				//info element;
				if(flag == columncount - 1)
				{
					elements.add({"type":"title","text":element.get(TaskName)});
				}
				else
				{
					if(!element.get(Duedate).isNull())
					{
						date = element.get(Duedate).toDate();
						DateChange = date;
						//info DateChange.toString();
					}
					else
					{
						DateChange = "-";
					}
					if(element.get(AssigneeName).isNull())
					{
						Assigneename = "Not Assigned";
					}
					else
					{
						if(element.get(AssigneeName) == emailid)
						{
							Assigneename = usernameval;
						}
						else
						{
							Assigneename = element.get(AssigneeName);
						}
					}
					elements.add({"type":"text","text":TaskName + ": " + element.get(TaskName)});
					elements.add({"type":"text","text":Duedate + ": " + DateChange});
					elements.add({"type":"text","text":AssigneeName + ": " + Assigneename});
					for each  i in addval
					{
						if(element.get(i).isNull())
						{
							addone = "-";
						}
						else
						{
							addone = element.get(i).toString();
						}
						elements.add({"type":"text","text":i + ": " + addone});
					}
					val1 = element.get(TaskName);
					//info val1;
					rowidnumber = element.get("Rowid");
					//info rowidnumber;
					elements.add({"type":"buttons","buttons":{{"label":"Mark as Completed","type":"invoke.function","name":"statuscompleted","id":rowidnumber},{"label":"View Comments","type":"invoke.function","name":"rowcomments","id":rowidnumber},{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowidnumber}}});
					elements.add({"type":"divider"});
				}
				sections.add({"id":val,"elements":elements});
				val = val + 1;
			}
		}
	}
	else if(EquivalentColumns.get("statusid") != 0 && notesid != 0)
	{
		val = 1;
		count1 = 0;
		for each  element in Rowmapval
		{
			//info element;
			if(element.get(statusname) == "Complete" || element.get(statusname) == "Completed")
			{
				continue;
			}
			else
			{
				elements = list();
				//info element.get("Tasks");
				if(element.get(TaskName).isNull())
				{
					continue;
				}
				count1 = count1 + 1;
				flag = 0;
				//info element;
				for each  ele in element
				{
					if(ele == NULL)
					{
						flag = flag + 1;
					}
				}
				//info element;
				if(flag == columncount - 1)
				{
					elements.add({"type":"title","text":element.get(TaskName)});
				}
				else
				{
					if(!element.get(Duedate).isNull())
					{
						date = element.get(Duedate).toDate();
						DateChange = date;
						//info DateChange.toString();
					}
					else
					{
						DateChange = "-";
					}
					if(element.get(AssigneeName).isNull())
					{
						Assigneename = "Not Assigned";
					}
					else
					{
						if(element.get(AssigneeName) == emailid)
						{
							Assigneename = usernameval;
						}
						else
						{
							Assigneename = element.get(AssigneeName);
						}
					}
					elements.add({"type":"text","text":TaskName + ": " + element.get(TaskName)});
					elements.add({"type":"text","text":Duedate + ": " + DateChange});
					elements.add({"type":"text","text":AssigneeName + ": " + Assigneename});
					for each  i in addval
					{
						if(element.get(i).isNull())
						{
							addone = "-";
						}
						else
						{
							addone = element.get(i).toString();
						}
						elements.add({"type":"text","text":i + ": " + addone});
					}
					val1 = element.get(TaskName);
					//info val1;
					rowidnumber = element.get("Rowid");
					//info rowidnumber;
					elements.add({"type":"buttons","buttons":{{"label":"Mark as Completed","type":"invoke.function","name":"statuscompleted","id":rowidnumber},{"label":"View Comments","type":"invoke.function","name":"rowcomments","id":rowidnumber},{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowidnumber},{"label":"View Notes","type":"invoke.function","name":"viewingnotes","id":rowidnumber},{"label":"Add Notes","type":"invoke.function","name":"addingnotes","id":rowidnumber}}});
					elements.add({"type":"divider"});
				}
				sections.add({"id":val,"elements":elements});
				val = val + 1;
			}
		}
	}
	if(count1 == 0)
	{
		applet = {"type":"applet","data_type":"info","info":{"title":"No task found","description":" ","image_url":"https://www.harmonyd.com/wp-content/uploads/2017/05/smart-sheet-logo.png"},"tabs":{{"label":"My " + taskname,"id":"mytask"},{"label":taskname,"id":"homeTab"}},"active_tab":"hometab"};
		//info applet;
	}
	else
	{
		length = sections.size();
		//info length;
		num = 0;
		if(length > 12)
		{
			buttons = List();
			buttons.add({"label":"Next","type":"invoke.function","name":"footer","id":num + 12 + "_homeTab_" + pagenumber});
			footer = {"buttons":buttons};
			applet = {"type":"applet","tabs":{{"label":"My " + taskname,"id":"mytask"},{"label":taskname,"id":"homeTab"}},"active_tab":"homeTab","header":header,"footer":footer,"sections":sections.subList(num,num + 12)};
		}
		else
		{
			applet = {"type":"applet","tabs":{{"label":"My " + taskname,"id":"mytask"},{"label":taskname,"id":"homeTab"}},"active_tab":"homeTab","header":header,"sections":sections};
		}
	}
}
else
{
	if(nusername.size() == 0)
	{
		applet = {"type":"applet","data_type":"info","info":{"title":"No task found","description":" ","image_url":"https://www.harmonyd.com/wp-content/uploads/2017/05/smart-sheet-logo.png"},"tabs":{{"label":"My " + taskname,"id":"mytask"},{"label":taskname,"id":"homeTab"}},"active_tab":"mytask"};
		return applet;
	}
	if(EquivalentColumns.get("statusid") == 0 && notesid == 0)
	{
		count1 = 0;
		val = 1;
		for each  element in Rowmapval
		{
			elements = list();
			//info element;
			//info element.get("Tasks");
			//info element.get(AssigneeName);
			if(element.get(TaskName).isNull() || element.get(AssigneeName).isNull())
			{
				continue;
			}
			flag = 0;
			//info element;
			for each  ele in element
			{
				if(ele == NULL)
				{
					flag = flag + 1;
				}
			}
			//info element;
			if(flag == columncount - 1)
			{
				elements.add({"type":"title","text":element.get(TaskName)});
			}
			else
			{
				//info element;
				if(!element.get(Duedate).isNull())
				{
					date = element.get(Duedate).toDate();
					DateChange = date;
					//info DateChange;
					//info DateChange.toString();
				}
				else
				{
					DateChange = "-";
				}
				if(element.get(AssigneeName).isNull())
				{
					continue;
				}
				if(element.get(AssigneeName) == emailid)
				{
					Assigneename = usernameval;
				}
				else
				{
					continue;
				}
				count1 = count1 + 1;
				elements.add({"type":"text","text":TaskName + ": " + element.get(TaskName)});
				elements.add({"type":"text","text":Duedate + ": " + DateChange});
				elements.add({"type":"text","text":AssigneeName + ": " + Assigneename});
				for each  i in addval
				{
					if(element.get(i).isNull())
					{
						addone = "-";
					}
					else
					{
						addone = element.get(i).toString();
					}
					elements.add({"type":"text","text":i + ": " + addone});
				}
				val1 = element.get(TaskName);
				//info val1;
				rowidnumber = element.get("Rowid");
				//info rowidnumber;
				elements.add({"type":"buttons","buttons":{{"label":"View Comments","type":"invoke.function","name":"rowcomments","id":rowidnumber},{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowidnumber}}});
				elements.add({"type":"divider"});
			}
			sections.add({"id":val,"elements":elements});
			val = val + 1;
			//info elements;
		}
		//info count;
	}
	else if(EquivalentColumns.get("statusid") == 0 && notesid != 0)
	{
		count1 = 0;
		val = 1;
		for each  element in Rowmapval
		{
			elements = list();
			//info element;
			//info element.get("Tasks");
			//info element.get(AssigneeName);
			if(element.get(TaskName).isNull() || element.get(AssigneeName).isNull())
			{
				continue;
			}
			flag = 0;
			//info element;
			for each  ele in element
			{
				if(ele == NULL)
				{
					flag = flag + 1;
				}
			}
			//info element;
			if(flag == columncount - 1)
			{
				elements.add({"type":"title","text":element.get(TaskName)});
			}
			else
			{
				//info element;
				if(!element.get(Duedate).isNull())
				{
					date = element.get(Duedate).toDate();
					DateChange = date;
					//info DateChange;
					//info DateChange.toString();
				}
				else
				{
					DateChange = "-";
				}
				if(element.get(AssigneeName).isNull())
				{
					continue;
				}
				else
				{
					if(element.get(AssigneeName) == emailid)
					{
						Assigneename = usernameval;
					}
					else
					{
						continue;
					}
				}
				count1 = count1 + 1;
				elements.add({"type":"text","text":TaskName + ": " + element.get(TaskName)});
				elements.add({"type":"text","text":Duedate + ": " + DateChange});
				elements.add({"type":"text","text":AssigneeName + ": " + Assigneename});
				for each  i in addval
				{
					if(element.get(i).isNull())
					{
						addone = "-";
					}
					else
					{
						addone = element.get(i).toString();
					}
					elements.add({"type":"text","text":i + ": " + addone});
				}
				val1 = element.get(TaskName);
				//info val1;
				rowidnumber = element.get("Rowid");
				//info rowidnumber;
				elements.add({"type":"buttons","buttons":{{"label":"View Comments","type":"invoke.function","name":"rowcomments","id":rowidnumber},{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowidnumber},{"label":"View Notes","type":"invoke.function","name":"viewingnotes","id":rowidnumber},{"label":"Add Notes","type":"invoke.function","name":"addingnotes","id":rowidnumber}}});
				elements.add({"type":"divider"});
			}
			sections.add({"id":val,"elements":elements});
			val = val + 1;
			//info elements;
		}
	}
	else if(EquivalentColumns.get("statusid") != 0 && notesid == 0)
	{
		val = 1;
		count1 = 0;
		for each  element in Rowmapval
		{
			//info element;
			if(element.get(statusname) == "Complete" || element.get(statusname) == "Completed")
			{
				continue;
			}
			else
			{
				if(element.get(TaskName).isNull() || element.get(AssigneeName).isNull())
				{
					continue;
				}
				elements = list();
				flag = 0;
				//info element;
				for each  ele in element
				{
					if(ele == NULL)
					{
						flag = flag + 1;
					}
				}
				//info element;
				if(flag == columncount - 1)
				{
					elements.add({"type":"title","text":element.get(TaskName)});
				}
				else
				{
					if(!element.get(Duedate).isNull())
					{
						date = element.get(Duedate).toDate();
						DateChange = date;
						//info DateChange.toString();
					}
					else
					{
						DateChange = "-";
					}
					if(element.get(AssigneeName) == emailid)
					{
						Assigneename = usernameval;
					}
					else
					{
						continue;
					}
					count1 = count1 + 1;
					elements.add({"type":"text","text":TaskName + ": " + element.get(TaskName)});
					elements.add({"type":"text","text":Duedate + ": " + DateChange});
					elements.add({"type":"text","text":AssigneeName + ": " + Assigneename});
					for each  i in addval
					{
						if(element.get(i).isNull())
						{
							addone = "-";
						}
						else
						{
							addone = element.get(i).toString();
						}
						elements.add({"type":"text","text":i + ": " + addone});
					}
					val1 = element.get(TaskName);
					//info val1;
					rowidnumber = element.get("Rowid");
					//info rowidnumber;
					elements.add({"type":"buttons","buttons":{{"label":"Mark as Completed","type":"invoke.function","name":"statuscompleted","id":rowidnumber},{"label":"View Comments","type":"invoke.function","name":"rowcomments","id":rowidnumber},{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowidnumber}}});
					elements.add({"type":"divider"});
				}
				sections.add({"id":val,"elements":elements});
				val = val + 1;
			}
		}
	}
	else if(EquivalentColumns.get("statusid") != 0 && notesid != 0)
	{
		val = 1;
		count1 = 0;
		for each  element in Rowmapval
		{
			info element;
			if(element.get(statusname) == "Complete" || element.get(statusname) == "Completed")
			{
				info "Complete";
				continue;
			}
			else
			{
				elements = list();
				info element;
				//info element.get("Tasks");
				//info element.get(AssigneeName);
				if(element.get(TaskName).isNull() || element.get(AssigneeName).isNull())
				{
					continue;
				}
				flag = 0;
				info element;
				for each  ele in element
				{
					if(ele == NULL)
					{
						flag = flag + 1;
					}
				}
				//info element;
				if(flag == columncount - 1)
				{
					elements.add({"type":"title","text":element.get(TaskName)});
				}
				else
				{
					//info element;
					if(!element.get(Duedate).isNull())
					{
						date = element.get(Duedate).toDate();
						DateChange = date;
						//info DateChange;
						//info DateChange.toString();
					}
					else
					{
						DateChange = "-";
					}
					if(element.get(AssigneeName).isNull())
					{
						continue;
					}
					else
					{
						if(element.get(AssigneeName) == emailid)
						{
							Assigneename = usernameval;
						}
						else
						{
							continue;
						}
					}
					count1 = count1 + 1;
					elements.add({"type":"text","text":TaskName + ": " + element.get(TaskName)});
					elements.add({"type":"text","text":Duedate + ": " + DateChange});
					elements.add({"type":"text","text":AssigneeName + ": " + Assigneename});
					for each  i in addval
					{
						if(element.get(i).isNull())
						{
							addone = "-";
						}
						else
						{
							addone = element.get(i).toString();
						}
						elements.add({"type":"text","text":i + ": " + addone});
					}
					val1 = element.get(TaskName);
					//info val1;
					//rowidnumber = element.get("Rowid");
					info val1 + "-" + rowidnumber;
					rowidnumber = element.get("Rowid");
					//info rowidnumber;
					elements.add({"type":"buttons","buttons":{{"label":"Mark as Completed","type":"invoke.function","name":"statuscompleted","id":rowidnumber},{"label":"View Comments","type":"invoke.function","name":"rowcomments","id":rowidnumber},{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowidnumber},{"label":"View Notes","type":"invoke.function","name":"viewingnotes","id":rowidnumber},{"label":"Add Notes","type":"invoke.function","name":"addingnotes","id":rowidnumber}}});
					elements.add({"type":"divider"});
				}
				//info elements;
				sections.add({"id":val,"elements":elements});
				val = val + 1;
			}
		}
	}
	info count1;
	if(count1 == 0)
	{
		applet = {"type":"applet","data_type":"info","info":{"title":"No task found","description":" ","image_url":"https://www.harmonyd.com/wp-content/uploads/2017/05/smart-sheet-logo.png"},"tabs":{{"label":"My " + taskname,"id":"mytask"},{"label":taskname,"id":"homeTab"}},"active_tab":"mytask"};
	}
	else
	{
		length = sections.size();
		//info length;
		num = 0;
		if(length > 12)
		{
			buttons = List();
			buttons.add({"label":"Next","type":"invoke.function","name":"footer","id":num + 12 + "_mytask_" + pagenumber});
			footer = {"buttons":buttons};
			applet = {"type":"applet","tabs":{{"label":"My " + taskname,"id":"mytask"},{"label":taskname,"id":"homeTab"}},"active_tab":"mytask","header":header,"footer":footer,"sections":sections.subList(num,num + 12)};
		}
		else
		{
			applet = {"type":"applet","tabs":{{"label":"My " + taskname,"id":"mytask"},{"label":taskname,"id":"homeTab"}},"active_tab":"mytask","header":header,"sections":sections};
		}
	}
}
return applet;
]]></script>
</executor>
<executor>
<handlertype>7001</handlertype>
<type>0</type>
<script><![CDATA[// Return list of tabs that can be associated
return Map();
]]></script>
</executor>
</executors>
</applet>
</applets>
<functions>
<function>
<name>messagecardnext</name>
<id>4878936000000125673</id>
<description><![CDATA[next 20 values of the sheet]]></description>
<type>2000</type>
<executors>
<executor>
<handlertype>2000</handlertype>
<type>0</type>
<script><![CDATA[response = Map();
response_map = zoho.cliq.getRecords("notifications");
if(response_map.get("list").size() == 0)
{
	response = {"text":"There are no Sheets Mapped"};
	return response;
}
else if(response_map.get("list").size() <= 20)
{
	response = Map();
	response.put("text","*Mapped Channel Details*");
	bot = Map();
	bot.put("name","SmartSheet");
	bot.put("image","https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg");
	response.put("bot",bot);
	card = Map();
	card.put("theme","modern-inline");
	response.put("card",card);
	slidesList = list();
	slidesList0 = Map();
	slidesList0.put("type","table");
	slidesList0.put("title"," ");
	data = Map();
	headersList = list();
	headersList.add("Sheet Name");
	headersList.add("Selected Fields");
	headersList.add("Mapped Channel");
	headersList.add("Mapped By");
	headersList.add("Re-Map New Channel");
	headersList.add("Unmap Channel");
	data.put("headers",headersList);
	rowsList = list();
	for each  i in response_map.get("list")
	{
		row = Map();
		selected = "";
		selectfields = i.get("selectedfields").toList();
		for each  ele in selectfields
		{
			if(ele == selectfields.get(0))
			{
				selected = ele;
			}
			else
			{
				selected = selected + " , " + ele;
			}
		}
		row.put("Sheet Name",i.get("sheetname"));
		row.put("Selected Fields",selected);
		row.put("Mapped Channel",i.get("channelname"));
		row.put("Mapped By",i.get("user"));
		webhookid = i.get("webhookid").toNumber();
		if(i.get("userid") == user.get("id"))
		{
			row.put("Re-Map New Channel","[Edit](invoke.function|EditingChannel|scott.fisher@zylker.com|" + webhookid + ") ");
			row.put("Unmap Channel","[Delete](invoke.function|UnmappingChannel|scott.fisher@zylker.com|" + webhookid + ")");
		}
		else
		{
			row.put("Re-Map New Channel","-");
			row.put("Unmap Channel","-");
		}
		rowsList.add(row);
	}
	data.put("rows",rowsList);
	slidesList0.put("data",data);
	slidesList.add(slidesList0);
	response.put("slides",slidesList);
	return response;
}
else
{
	response = Map();
	response.put("text","*Mapped Channel Details*");
	bot = Map();
	bot.put("name","SmartSheet");
	bot.put("image","https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg");
	response.put("bot",bot);
	card = Map();
	card.put("theme","modern-inline");
	response.put("card",card);
	slidesList = list();
	slidesList0 = Map();
	slidesList0.put("type","table");
	slidesList0.put("title"," ");
	buttonsList = list();
	buttonsList0 = Map();
	buttonsList0.put("label","Next");
	buttonsList0.put("type","+");
	action = Map();
	action.put("type","invoke.function");
	data = Map();
	data.put("name","messagecardnext");
	action.put("data",data);
	buttonsList0.put("action",action);
	buttonsList.add(buttonsList0);
	slidesList0.put("buttons",buttonsList);
	data = Map();
	headersList = list();
	headersList.add("Sheet Name");
	headersList.add("Selected Fields");
	headersList.add("Mapped Channel");
	headersList.add("Mapped By");
	headersList.add("Re-Map New Channel");
	headersList.add("Unmap Channel");
	data.put("headers",headersList);
	rowsList = list();
	count = 0;
	l = response_map.get("list").subList(20,response_map.get("list").size());
	for each  i in l
	{
		if(count == 20)
		{
			break;
		}
		count = count + 1;
		row = Map();
		selected = "";
		selectfields = i.get("selectedfields").toList();
		for each  ele in selectfields
		{
			if(ele == selectfields.get(0))
			{
				selected = ele;
			}
			else
			{
				selected = selected + " , " + ele;
			}
		}
		row.put("Sheet Name",i.get("sheetname"));
		row.put("Selected Fields",selected);
		row.put("Mapped Channel",i.get("channelname"));
		row.put("Mapped By",i.get("user"));
		webhookid = i.get("webhookid").toNumber();
		if(i.get("userid") == user.get("id"))
		{
			row.put("Re-Map New Channel","[Edit](invoke.function|EditingChannel|scott.fisher@zylker.com|" + webhookid + ") ");
			row.put("Unmap Channel","[Delete](invoke.function|UnmappingChannel|scott.fisher@zylker.com|" + webhookid + ")");
		}
		else
		{
			row.put("Re-Map New Channel","-");
			row.put("Unmap Channel","-");
		}
		rowsList.add(row);
	}
	data.put("rows",rowsList);
	slidesList0.put("data",data);
	slidesList.add(slidesList0);
	response.put("slides",slidesList);
	return response;
}
]]></script>
</executor>
</executors>
</function>
<function>
<name>Notificationsmapsheetone</name>
<id>4878936000000124023</id>
<description><![CDATA[to test]]></description>
<type>2001</type>
<executors>
<executor>
<handlertype>2001</handlertype>
<type>0</type>
<script><![CDATA[response = Map();
r = Map();
info form;
values = form.get("values");
details = form.get("values").get("ChannelDetails").toList("_");
SheetId = details.get(0).toNumber();
ChannelUniquename = details.get(1);
Channelname = details.get(2);
Sheetname = details.get(3);
c = Map();
c.put("duedate",values.get("DueDate").get("label"));
c.put("duedateid",values.get("DueDate").get("value"));
c.put("task",values.get("TaskName").get("label"));
c.put("taskid",values.get("TaskName").get("value"));
c.put("assignee",values.get("Assignee").get("label"));
c.put("assigneeid",values.get("Assignee").get("value"));
c.put("userid",user.get("id"));
info values.get("Status").get("label").isNull();
if(!values.get("Status").get("label").isNull())
{
	c.put("status",values.get("Status").get("label"));
	c.put("statusid",values.get("Status").get("value"));
}
fields = SheetId + "_ Webhooks";
c.put("field",fields);
info c;
//response.put("text",c);
response_map = zoho.cliq.createRecord("equivalentcolumns",c);
d = Map();
d.put("userid",user.get("id"));
if(!values.get("Notes").get("label").isNull())
{
	d.put("notes",values.get("Notes").get("label"));
	d.put("notesid",values.get("Notes").get("value"));
}
val = form.get("values");
num = {"1":"one","2":"two","3":"three"};
n = 1;
for each  element in val.get("Additional")
{
	if(element.isNull())
	{
		continue;
	}
	else
	{
		d.put("add" + num.get(n.toString()),element.get("label"));
		d.put("add" + num.get(n.toString()) + "id",element.get("value"));
	}
	n = n + 1;
}
d.put("field",fields);
info d;
response_map1 = zoho.cliq.createRecord("additionalfields",d);
selectedcolums = List();
l = List();
if(!values.get("Status").isNull())
{
	selectedcolums.add(values.get("Status").get("label"));
	l.add(values.get("Status").get("value"));
}
if(!values.get("TaskName").isNull())
{
	selectedcolums.add(values.get("TaskName").get("label"));
	l.add(values.get("TaskName").get("value"));
}
if(!values.get("DueDate").isNull())
{
	selectedcolums.add(values.get("DueDate").get("label"));
	l.add(values.get("DueDate").get("value"));
}
if(!values.get("Assignee").isNull())
{
	selectedcolums.add(values.get("Assignee").get("label"));
	l.add(values.get("Assignee").get("value"));
}
if(!values.get("Notes").isNull())
{
	selectedcolums.add(values.get("Notes").get("label"));
	l.add(values.get("Notes").get("value"));
}
info values.get("Additional").size();
if(values.get("Additional").size() > 0)
{
	for each  element in values.get("Additional")
	{
		selectedcolums.add(element.get("label"));
		l.add(element.get("value"));
	}
}
g = l.distinct();
g.removeElement(null);
info g;
new = selectedcolums.distinct();
new.removeElement(null);
info new;
columnidforwebhooks = Map();
columnidforwebhooks.put("columnIds",g);
info columnidforwebhooks;
webhookmap = Map();
query_map = Map();
criteria_string = "userid==" + user.get("id");
query_map.put("criteria",criteria_string);
response_map = zoho.cliq.getRecords("weebhookkey",query_map).get("list").get(0);
info response_map;
callbackurl = "https://cliq.zoho.com/api/v2/applications/4294/incoming?appkey=NDI5NC03ZTE4MmVmYi0zZTRhLTQyZmYtOTViZC05MmE4NDUzZDU2OGM=&zapikey=" + response_map.get("zapikey").trim();
info callbackurl;
webhookmap.put("name","webhook");
webhookmap.put("callbackUrl",callbackurl);
webhookmap.put("scope","sheet");
webhookmap.put("scopeObjectId",SheetId);
webhookmap.put("events",{"*.*"});
webhookmap.put("version",1);
webhookmap.put("subscope",columnidforwebhooks);
info webhookmap;
values_map = Map();
values_map.put("selectedfields",new);
//values_map.put("webhookid", "123"); 
values_map.put("sheetid",SheetId);
values_map.put("uniquename",ChannelUniquename);
values_map.put("user",user.get("first_name"));
values_map.put("userid",user.get("id"));
values_map.put("channelname",Channelname);
//values_map.put("enabled", "TRUE"); 
values_map.put("sheetname",Sheetname);
// Set values for other fields if required 
c.put("text",webhookmap);
header_data = Map();
header_data.put("Content-Type","application/json");
response = invokeurl
[
	url :" https://api.smartsheet.com/2.0/webhooks"
	type :POST
	parameters:webhookmap.toString()
	headers:header_data
	connection:"test1"
];
info response;
webhookid = response.get("result").get("id");
info webhookid;
values_map.put("webhookid",webhookid);
eventtrue = Map();
eventtrue.put("enabled",true);
response1 = invokeurl
[
	url :" https://api.smartsheet.com/2.0/webhooks/" + webhookid
	type :PUT
	parameters:eventtrue.toString()
	headers:header_data
	connection:"test1"
];
//info response1;
webhookstatus = response1.get("result").get("status");
info webhookstatus;
if(webhookstatus == "ENABLED")
{
	values_map.put("enabled","TRUE");
}
//c.put("text",response1);
//return c;
info values_map;
response_map = zoho.cliq.createRecord("notifications",values_map);
info response_map;
if(response_map.get("status") == "SUCCESS")
{
	r.put("text","Your Sheet is sucessfully mapped to the " + Channelname + " :wink:");
	zoho.cliq.postToChannel(ChannelUniquename,{"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"text":"This Channel is Mapped with *SmartSheet's* " + Sheetname + " by " + user.get("first_name") + " You will get notification regarding the sheets here :wink:"});
}
else
{
	r.put("text","Oops there a techinal error please comeback and try again");
}
return r;
]]></script>
</executor>
</executors>
</function>
<function>
<name>EditedChannelToDB</name>
<id>4878936000000124021</id>
<description><![CDATA[Unmapping Channel]]></description>
<type>2001</type>
<executors>
<executor>
<handlertype>2001</handlertype>
<type>0</type>
<script><![CDATA[response = Map();
info form;
webhookid = form.get("name").toNumber();
info webhookid;
uniquename = form.get("values").get("channels").get("unique_name");
name = form.get("values").get("channels").get("name");
info uniquename;
info name;
values_map = Map();
values_map.put("uniquename",uniquename);
values_map.put("channelname",name);
values_map.put("userid",user.get("id"));
values_map.put("user",user.get("first_name"));
query_mapn = Map();
criteria_stringn = "webhookid==" + webhookid;
query_mapn.put("criteria",criteria_stringn);
response_map = zoho.cliq.getRecords("notifications",query_mapn);
info response_map;
channel = response_map.get("list").get(0).get("uniquename");
info uniquename;
info channel;
if(name == channel)
{
	r = Map();
	r.put("text",name + " is currently mapped. Please try selecting another channel");
	return r;
}
record_id = response_map.get("list").get(0).get("id");
zoho.cliq.postToChannel(channel,{"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"text":"This Channel is Unmapped from *SmartSheet's* " + response_map.get("list").get(0).get("sheetname") + " by " + user.get("first_name")});
info response_map;
if(response_map.get("status").equalsIgnoreCase("SUCCESS") && response_map.get("list").size() > 0)
{
	record_id = response_map.get("list").get(0).get("id");
	info record_id;
}
sheetdetails = zoho.cliq.getRecordById("notifications",record_id);
if(record_id.length() > 0)
{
	response_map = zoho.cliq.updateRecord("notifications",record_id,values_map);
}
info response_map;
if(response_map.get("status") == "SUCCESS")
{
	response.put("text","Channel is successfully Remapped");
	zoho.cliq.postToChannel(uniquename,{"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"text":"This Channel is Mapped with *SmartSheet's* " + sheetdetails.get("object").get("sheetname") + " by " + user.get("first_name") + " You will get notification regarding the sheets here :wink:"});
}
else
{
	response.put("text","There is an error in configurations");
}
return response;
]]></script>
</executor>
</executors>
</function>
<function>
<name>Zapikeys</name>
<id>4878936000000106157</id>
<description><![CDATA[To get ZAPI Token from user]]></description>
<type>2000</type>
<executors>
<executor>
<handlertype>2000</handlertype>
<type>0</type>
<script><![CDATA[response = Map();
Webhooktoken = arguments.get("input").get("token");
query_map = Map();
criteria_string = "userid==" + user.get("id");
query_map.put("criteria",criteria_string);
response_map = zoho.cliq.getRecords("weebhookkey",query_map);
info response_map;
if(response_map.get("status").equalsIgnoreCase("SUCCESS") && response_map.get("list").size() > 0)
{
	response = Map();
	response.put("text","# Authorization is already granted");
	card = Map();
	card.put("title","");
	card.put("thumbnail","https://i.ibb.co/4sHFFbN/newl.png");
	card.put("theme","prompt");
	response.put("card",card);
	info response;
	return response;
}
else
{
	values_map1 = Map();
	values_map1.put("userid",user.get("id"));
	values_map1.put("zapikey",Webhooktoken);
	response_map1 = zoho.cliq.createRecord("weebhookkey",values_map1);
	info response_map1;
	if(response_map1.get("status").equalsIgnoreCase("SUCCESS"))
	{
		response1 = invokeurl
		[
			url :"https://api.smartsheet.com/2.0/sheets"
			type :GET
			connection:"test1"
		];
		info response1;
		totalsheetcount = response1.get("totalCount");
		sheetids = Collection();
		query_mapn = Map();
		criteria_stringn = "userid==" + user.get("id");
		query_mapn.put("criteria",criteria_stringn);
		response_mapn = zoho.cliq.getRecords("notifications",query_mapn);
		totaldbsize = response_mapn.get("list").size();
		info response_mapn;
		if(response_mapn.get("status") == "SUCCESS" && response_mapn.get("list").size() == 0)
		{
			groups1 = response1.toMap();
			for each  group in groups1.get("data")
			{
				if(!isNumber(group))
				{
					sidnumber = group.get("id");
					sheetname = group.get("name").toString();
					sheetids.add({"label":sheetname,"value":sidnumber});
				}
			}
			info sheetids;
			form = {"name":"Notification-subtask-map","type":"form","title":"Map Sheet","button_label":"Next","inputs":{{"type":"dynamic_select","name":"Sheet","label":"Sheets","hint":"Select your default Sheet","placeholder":"1.Task Sheet","mandatory":true,"value":"sid","options":sheetids},{"name":"channels","extension_association":true,"label":"Channels","placeholder":"Select the channels","multiple":false,"mandatory":true,"type":"native_select","data_source":"channels"}},"action":{"type":"invoke.function","name":"FormFunctions"}};
			return form;
		}
	}
}
return response;
]]></script>
</executor>
</executors>
</function>
<function>
<name>One</name>
<id>4878936000000106151</id>
<description><![CDATA[To create a form to get default workspace and sheet ID's]]></description>
<type>2000</type>
<executors>
<executor>
<handlertype>2000</handlertype>
<type>0</type>
<script><![CDATA[info target;
l = Map();
//par = {"name":"workspacefromcliq"};
//header_data = Map();
//header_data.put("Content-Type","application/json");
/*response = invokeurl
[
	url :"https://api.smartsheet.com/2.0/workspaces"
	type :GET
	connection:"test1"
];*/
response1 = invokeurl
[
	url :"https://api.smartsheet.com/2.0/sheets"
	type :GET
	connection:"test1"
];
workspaceids = Collection();
sheetids = Collection();
/*for each  group in groups.get("data")
{
	if(!isNumber(group))
	{
		idnumber = group.get("id");
		workspacename = group.get("name").toString();
		workspaceids.add({"label":workspacename,"value":idnumber});
	}
}*/
groups1 = response1.toMap();
for each  group in groups1.get("data")
{
	if(!isNumber(group))
	{
		sidnumber = group.get("id");
		sheetname = group.get("name").toString();
		sheetids.add({"label":sheetname,"value":sidnumber});
	}
}
form = {"name":"Workspace","type":"form","title":"Configurations","hint":"","button_label":"Next","inputs":{{"type":"dynamic_select","name":"Sheet","label":"Sheets","hint":"Select your default Sheet","placeholder":"1.Task Sheet","mandatory":true,"value":"sid","options":sheetids}},"action":{"type":"invoke.function","name":"FormFunctions"}};
return form;
]]></script>
</executor>
</executors>
</function>
<function>
<name>Widgetaddtaskform</name>
<id>4878936000000106149</id>
<description><![CDATA[Creates a form for add task for widget and sends it to create task function]]></description>
<type>2010</type>
<executors>
<executor>
<handlertype>2010</handlertype>
<type>0</type>
<script><![CDATA[r = Map();
response = Map();
query_map = Map();
criteria_string = "userid==" + user.get("id") + " && field==Widget";
query_map.put("criteria",criteria_string);
response_map = zoho.cliq.getRecords("equivalentcolumns",query_map);
//info response_map;
record_id = -1;
if(response_map.get("status").equalsIgnoreCase("SUCCESS") && response_map.get("list").size() > 0)
{
	record_id = response_map.get("list").get(0).get("id");
}
//info record_id;
response_map1 = zoho.cliq.getRecordById("equivalentcolumns",record_id);
if(record_id == -1)
{
	response.put("text","Please Configure the Sheet to Cliq");
	return response;
}
Taskequivalent = response_map1.get("object").get("task");
Assigneeequivalent = response_map1.get("object").get("assignee");
Duedateequivalent = response_map1.get("object").get("duedate");
info Taskequivalent;
info Assigneeequivalent;
info Duedateequivalent;
query_mape = Map();
criteria_stringe = "userid==" + user.get("id");
query_mape.put("criteria",criteria_stringe);
response_mape = zoho.cliq.getRecords("defaultiddb",query_mape);
sheetid = response_mape.get("list").get(0).get("sheetid");
query_mapt = Map();
criteria_stringt = "userid==" + user.get("id") + " && field==Widget";
query_mapt.put("criteria",criteria_stringt);
response_mapt = zoho.cliq.getRecords("equivalentcolumns",query_mapt);
statusid = response_mapt.get("list").get(0).get("statusid");
status = response_mapt.get("list").get(0).get("status");
c = List();
c.add({"name":"Task","label":Taskequivalent,"placeholder":"Type the " + Taskequivalent + " name","min_length":"0","max_length":"25","mandatory":true,"type":"text"});
c.add({"type":"native_select","name":"member","label":Assigneeequivalent,"hint":"","placeholder":"Select the Assignee","mandatory":false,"data_source":"contacts"});
c.add({"name":"date","label":Duedateequivalent,"placeholder":"Select the date","mandatory":false,"type":"date"});
if(statusid != 0)
{
	response = invokeurl
	[
		url :"https://api.smartsheet.com/2.0/sheets/" + sheetid
		type :GET
		connection:"test1"
	];
	info sheetid;
	op = Collection();
	for each  element in response.get("columns")
	{
		//info element;
		if(element.get("id") == statusid)
		{
			c1 = element.get("options");
			for each  i in c1
			{
				info i;
				op.add({"label":i,"value":i.replaceAll(" ","_")});
			}
		}
	}
	c.add({"type":"dynamic_select","name":"Sheet","label":status,"hint":" ","placeholder":"Select","mandatory":false,"value":"sid","options":op.toList()});
}
query_mapw = Map();
criteria_stringw = "userid==" + user.get("id") + " && field==Widget";
query_mapw.put("criteria",criteria_stringw);
response_mapw = zoho.cliq.getRecords("additionalfields",query_mapw);
record_idw = 0;
if(response_mapw.get("status").equalsIgnoreCase("SUCCESS") && response_mapw.get("list").size() > 0)
{
	record_idw = response_mapw.get("list").get(0).get("id");
}
response_mapw = zoho.cliq.getRecordById("additionalfields",record_idw);
if(response_mapw.get("object").get("notesid") != 0)
{
	c.add({"type":"textarea","name":"note","label":response_mapw.get("object").get("notes"),"hint":"","placeholder":"Type the " + response_mapw.get("object").get("notes"),"mandatory":false,"value":""});
}
form = {"type":"form","title":"Create Task","hint":"","name":"Widget CreateTask","version":1,"button_label":"Add Task","action":{"type":"invoke.function","name":"FormFunctions"},"inputs":c};
return form;
]]></script>
</executor>
</executors>
</function>
<function>
<name>viewingnotes</name>
<id>4878936000000106147</id>
<description><![CDATA[Widget Button to view task notes]]></description>
<type>2010</type>
<executors>
<executor>
<handlertype>2010</handlertype>
<type>0</type>
<script><![CDATA[info target;
response = Map();
//response.put("text",target);
l = Map();
// --------->Gets the data from Default Id DB
query_mape = Map();
criteria_stringe = "userid==" + user.get("id");
query_mape.put("criteria",criteria_stringe);
defaultids = zoho.cliq.getRecords("defaultiddb",query_mape).get("list").get(0);
info defaultids;
sheetname = defaultids.get("sheetname");
info sheetname;
sheetid = defaultids.get("sheetid");
// ---------->Gets the data from Equivalent
query_mapt = Map();
criteria_stringt = "userid==" + user.get("id") + "&& field==Widget";
query_mapt.put("criteria",criteria_stringt);
EquivalentColumns = zoho.cliq.getRecords("equivalentcolumns",query_mapt).get("list").get(0);
taskid = EquivalentColumns.get("taskid");
taskname = EquivalentColumns.get("task");
assigneeid = EquivalentColumns.get("assigneeid");
statusname = EquivalentColumns.get("status");
duedateid = EquivalentColumns.get("duedateid");
// -------------> Gets the data from Additional Columns
query_mapw = Map();
criteria_stringw = "userid==" + user.get("id") + "&& field==Widget";
query_mapw.put("criteria",criteria_stringw);
AdditionalColumns = zoho.cliq.getRecords("additionalfields",query_mapw).get("list").get(0);
notesname = AdditionalColumns.get("notes");
notesid = AdditionalColumns.get("notesid");
TaskID = EquivalentColumns.get("taskid");
Duedate = EquivalentColumns.get("duedate");
AssigneeName = EquivalentColumns.get("assignee");
TaskName = EquivalentColumns.get("task");
addval = List();
if(AdditionalColumns.get("addone") != "NULL")
{
	addval.add(AdditionalColumns.get("addoneid"));
}
if(AdditionalColumns.get("addtwo") != "NULL")
{
	addval.add(AdditionalColumns.get("addtwoid"));
}
if(AdditionalColumns.get("addthree") != "NULL")
{
	addval.add(AdditionalColumns.get("addthreeid"));
}
info addval;
response1 = invokeurl
[
	url :"https://api.smartsheet.com/2.0/sheets/" + sheetid
	type :GET
	connection:"test1"
];
//info response1.toMap();
for each  element in response1.get("rows")
{
	if(element.get("id") == target.get("id"))
	{
		cgi = element;
		for each  ele in element.get("cells")
		{
			if(ele.get("columnId") == taskid)
			{
				taskvalue = ele.get("value");
			}
			if(ele.get("columnId") == duedateid)
			{
				//info ele.get("value");
				if(ele.get("value") == NULL)
				{
					duedatevalue = "-";
				}
				else
				{
					date = ele.get("value");
					date1 = date.toDate();
					duedatevalue = date1;
				}
			}
			if(ele.get("columnId") == assigneeid)
			{
				//info ele.get("value");
				if(ele.get("value") == NULL)
				{
					assigneevalue = "Not Assigned";
				}
				else
				{
					assigneevalue = ele.get("displayValue");
				}
			}
			if(ele.get("columnId") == notesid)
			{
				//info ele.get("value");
				if(ele.get("value") == NULL)
				{
					c = "No Notes";
				}
				else
				{
					c = ele.get("value");
					//info c;
				}
			}
		}
	}
}
elements = list();
sections = Map();
elements.add({"type":"text","text":TaskName + ": " + taskvalue});
elements.add({"type":"text","text":Duedate + ": " + duedatevalue});
elements.add({"type":"text","text":AssigneeName + ": " + assigneevalue});
info addval;
for each  i in addval
{
	for each  element in cgi.get("cells")
	{
		info element;
		if(element.get("columnId") == i)
		{
			if(element.get("value").isNull())
			{
				val = "-";
			}
			else
			{
				val = element.get("value");
			}
			info val;
			g = AdditionalColumns.getkey(i);
			g1 = g.toList("i");
			ng = g1.get(0);
			info AdditionalColumns.get(ng);
			elements.add({"type":"text","text":AdditionalColumns.get(ng) + ": " + val});
		}
	}
}
elements.add({"type":"text","text":notesname});
if(c == "No Notes")
{
	elements.add({"type":"subtext","text":c});
}
else
{
	elements.add({"type":"subtext","text":"  >> " + c});
}
if(statusname == "NULL" && notesid != 0)
{
	elements.add({"type":"buttons","buttons":{{"label":"Add Notes","type":"invoke.function","name":"addingnotes","id":target.get("id")},{"label":"View Comments","type":"invoke.function","name":"rowcomments","id":target.get("id")},{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":target.get("id")}}});
}
else if(statusname != "NULL" && notesid != 0)
{
	elements.add({"type":"buttons","buttons":{{"label":"Add Notes","type":"invoke.function","name":"addingnotes","id":target.get("id")},{"label":"Mark as Completed","type":"invoke.function","name":"statuscompleted","id":target.get("id")},{"label":"View Comments","type":"invoke.function","name":"rowcomments","id":target.get("id")},{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":target.get("id")}}});
}
elements.add({"type":"divider"});
/*sections.put({"id":1,"elements":elements});
info sections;
return sections;*/
l.put("type","section");
l.put("elements",elements);
info l;
info cgi;
return l;
//return response;
]]></script>
</executor>
</executors>
</function>
<function>
<name>addingnotes</name>
<id>4878936000000106145</id>
<description><![CDATA[Widget button adds notes to the Sheet from widget]]></description>
<type>2010</type>
<executors>
<executor>
<handlertype>2010</handlertype>
<type>0</type>
<script><![CDATA[response = Map();
query_mapw = Map();
criteria_stringw = "userid==" + user.get("id") + " && field==Widget";
query_mapw.put("criteria",criteria_stringw);
AdditionalColumns = zoho.cliq.getRecords("additionalfields",query_mapw).get("list").get(0);
notename = AdditionalColumns.get("notes");
info target.get("id");
inputs = list();
inputs.add({"type":"textarea","name":"note","label":"Add " + notename,"hint":notename + " you add goes to this task","placeholder":"Type your " + notename + " here.","mandatory":true,"value":""});
form = {"type":"form","title":"Add " + notename,"hint":"","name":target.get("id"),"version":1,"button_label":"Add " + notename,"action":{"type":"invoke.function","name":"notestosheets"},"inputs":inputs};
return form;
]]></script>
</executor>
</executors>
</function>
<function>
<name>statuscompleted</name>
<id>4878936000000106143</id>
<description><![CDATA[Marks the status as completed on the sheet]]></description>
<type>2010</type>
<executors>
<executor>
<handlertype>2010</handlertype>
<type>0</type>
<script><![CDATA[response = Map();
id = target.get("id");
query_mape = Map();
criteria_stringe = "userid==" + user.get("id");
query_mape.put("criteria",criteria_stringe);
sheetid = zoho.cliq.getRecords("defaultiddb",query_mape).get("list").get(0).get("sheetid");
query_mapt = Map();
criteria_stringt = "userid==" + user.get("id") + "&& field==Widget";
query_mapt.put("criteria",criteria_stringt);
response_map1 = zoho.cliq.getRecords("equivalentcolumns",query_mapt);
statuscolumnid = response_map1.get("list").get(0).get("statusid");
//notesid = response_map1.get("list").get(0).get("notesid");
taskid = response_map1.get("list").get(0).get("taskid");
duedateid = response_map1.get("list").get(0).get("duedateid");
assigneeid = response_map1.get("list").get(0).get("assigneeid");
Duedate = response_map1.get("list").get(0).get("duedate");
AssigneeName = response_map1.get("list").get(0).get("assignee");
TaskName = response_map1.get("list").get(0).get("task");
query_mapw = Map();
criteria_stringw = "userid==" + user.get("id") + "&& field==Widget";
query_mapw.put("criteria",criteria_stringw);
AdditionalColumns = zoho.cliq.getRecords("additionalfields",query_mapw).get("list").get(0);
notesname = AdditionalColumns.get("notes");
notesid = AdditionalColumns.get("notesid");
addval = List();
if(AdditionalColumns.get("addone") != "NULL")
{
	addval.add(AdditionalColumns.get("addoneid"));
}
if(AdditionalColumns.get("addtwo") != "NULL")
{
	addval.add(AdditionalColumns.get("addtwoid"));
}
if(AdditionalColumns.get("addthree") != "NULL")
{
	addval.add(AdditionalColumns.get("addthreeid"));
}
info addval;
header_data = Map();
header_data.put("Content-Type","application/json");
param = Map();
val = Map();
val.put("columnId",statuscolumnid);
val.put("value","Complete");
list = List();
list.add(val);
param.put("id",id);
param.put("cells",list);
info param;
response = invokeurl
[
	url :"https://api.smartsheet.com/2.0/sheets/" + sheetid + "/rows"
	type :PUT
	parameters:param.toString()
	headers:header_data
	connection:"test1"
];
info response;
if(response.get("errorCode") == 1042)
{
	header_data = Map();
	header_data.put("Content-Type","application/json");
	param = Map();
	val = Map();
	val.put("columnId",statuscolumnid);
	val.put("value","Completed");
	list = List();
	list.add(val);
	param.put("id",id);
	param.put("cells",list);
	info param;
	response = invokeurl
	[
		url :"https://api.smartsheet.com/2.0/sheets/" + sheetid + "/rows"
		type :PUT
		parameters:param.toString()
		headers:header_data
		connection:"test1"
	];
}
response1 = invokeurl
[
	url :"https://api.smartsheet.com/2.0/sheets/" + sheetid
	type :GET
	connection:"test1"
];
//info response1.toMap();
for each  element in response1.get("rows")
{
	if(element.get("id") == target.get("id"))
	{
		cgi = element;
		for each  ele in element.get("cells")
		{
			if(ele.get("columnId") == taskid)
			{
				taskvalue = ele.get("value");
			}
			if(ele.get("columnId") == duedateid)
			{
				//info ele.get("value");
				if(ele.get("value") == NULL)
				{
					duedatevalue = "-";
				}
				else
				{
					date = ele.get("value");
					date1 = date.toDate();
					duedatevalue = date1;
				}
			}
			if(ele.get("columnId") == assigneeid)
			{
				//info ele.get("value");
				if(ele.get("value") == NULL)
				{
					assigneevalue = "Not Assigned";
				}
				else
				{
					assigneevalue = ele.get("displayValue");
				}
			}
		}
	}
}
elements = list();
sections = Map();
elements.add({"type":"text","text":TaskName + ": " + taskvalue});
elements.add({"type":"text","text":Duedate + ": " + duedatevalue});
elements.add({"type":"text","text":AssigneeName + ": " + assigneevalue});
for each  i in addval
{
	for each  element in cgi.get("cells")
	{
		info element;
		if(element.get("columnId") == i)
		{
			if(element.get("value").isNull())
			{
				val = "-";
			}
			else
			{
				val = element.get("displayValue");
			}
			info val;
			g = AdditionalColumns.getkey(i);
			g1 = g.toList("i");
			ng = g1.get(0);
			info AdditionalColumns.get(ng);
			elements.add({"type":"text","text":AdditionalColumns.get(ng) + ": " + val});
		}
	}
}
elements.add({"type":"subtext","text":"Marked as Completed"});
elements.add({"type":"divider"});
/*sections.put({"id":1,"elements":elements});
info sections;
return sections;*/
l = Map();
l.put("type","section");
l.put("elements",elements);
info l;
return l;
//return response;
]]></script>
</executor>
</executors>
</function>
<function>
<name>notestosheets</name>
<id>4878936000000106141</id>
<description><![CDATA[Gets the notes from the form in widget and adds it to the Smart Sheet]]></description>
<type>2001</type>
<executors>
<executor>
<handlertype>2001</handlertype>
<type>0</type>
<script><![CDATA[response = Map();
info form;
rowidnumber = form.get("name").toNumber();
notes = form.get("values").get("note");
//response.put("text",target);
l = Map();
// --------->Gets the data from Default Id DB
query_mape = Map();
criteria_stringe = "userid==" + user.get("id");
query_mape.put("criteria",criteria_stringe);
defaultids = zoho.cliq.getRecords("defaultiddb",query_mape).get("list").get(0);
info defaultids;
sheetname = defaultids.get("sheetname");
info sheetname;
sheetid = defaultids.get("sheetid");
// ---------->Gets the data from Equivalent
query_mapt = Map();
criteria_stringt = "userid==" + user.get("id") + "&& field==Widget";
query_mapt.put("criteria",criteria_stringt);
EquivalentColumns = zoho.cliq.getRecords("equivalentcolumns",query_mapt).get("list").get(0);
taskid = EquivalentColumns.get("taskid");
taskname = EquivalentColumns.get("task");
assigneeid = EquivalentColumns.get("assigneeid");
statusname = EquivalentColumns.get("status");
duedateid = EquivalentColumns.get("duedateid");
// -------------> Gets the data from Additional Columns
query_mapw = Map();
criteria_stringw = "userid==" + user.get("id") + "&& field==Widget";
query_mapw.put("criteria",criteria_stringw);
AdditionalColumns = zoho.cliq.getRecords("additionalfields",query_mapw).get("list").get(0);
notesname = AdditionalColumns.get("notes");
notesid = AdditionalColumns.get("notesid");
TaskID = EquivalentColumns.get("taskid");
Duedate = EquivalentColumns.get("duedate");
AssigneeName = EquivalentColumns.get("assignee");
TaskName = EquivalentColumns.get("task");
addval = List();
if(AdditionalColumns.get("addone") != "NULL")
{
	addval.add(AdditionalColumns.get("addoneid"));
}
if(AdditionalColumns.get("addtwo") != "NULL")
{
	addval.add(AdditionalColumns.get("addtwoid"));
}
if(AdditionalColumns.get("addthree") != "NULL")
{
	addval.add(AdditionalColumns.get("addthreeid"));
}
info addval;
response1 = invokeurl
[
	url :"https://api.smartsheet.com/2.0/sheets/" + sheetid
	type :GET
	connection:"test1"
];
header_data = Map();
header_data.put("Content-Type","application/json");
param = Map();
val = Map();
val.put("columnId",notesid);
val.put("value",notes);
list = List();
list.add(val);
param.put("id",rowidnumber);
param.put("cells",list);
info param;
response = invokeurl
[
	url :"https://api.smartsheet.com/2.0/sheets/" + sheetid + "/rows"
	type :PUT
	parameters:param.toString()
	headers:header_data
	connection:"test1"
];
//info response1.toMap();
for each  element in response1.get("rows")
{
	if(element.get("id") == rowidnumber)
	{
		cgi = element;
		for each  ele in element.get("cells")
		{
			if(ele.get("columnId") == taskid)
			{
				taskvalue = ele.get("value");
			}
			if(ele.get("columnId") == duedateid)
			{
				//info ele.get("value");
				if(ele.get("value") == NULL)
				{
					duedatevalue = "-";
				}
				else
				{
					date = ele.get("value");
					date1 = date.toDate();
					duedatevalue = date1;
				}
			}
			if(ele.get("columnId") == assigneeid)
			{
				//info ele.get("value");
				if(ele.get("value") == NULL)
				{
					assigneevalue = "Not Assigned";
				}
				else
				{
					assigneevalue = ele.get("displayValue");
				}
			}
		}
	}
}
elements = list();
sections = Map();
elements.add({"type":"text","text":TaskName + ": " + taskvalue});
elements.add({"type":"text","text":Duedate + ": " + duedatevalue});
elements.add({"type":"text","text":AssigneeName + ": " + assigneevalue});
for each  i in addval
{
	for each  element in cgi.get("cells")
	{
		info element;
		if(element.get("columnId") == i)
		{
			if(element.get("value").isNull())
			{
				val = "-";
			}
			else
			{
				val = element.get("value");
			}
			info val;
			g = AdditionalColumns.getkey(i);
			g1 = g.toList("i");
			ng = g1.get(0);
			info AdditionalColumns.get(ng);
			elements.add({"type":"text","text":AdditionalColumns.get(ng) + ": " + val});
		}
	}
}
elements.add({"type":"text","text":notesname});
elements.add({"type":"subtext","text":notes});
if(statusname == "NULL" && notesid != 0)
{
	elements.add({"type":"buttons","buttons":{{"label":"Add Notes","type":"invoke.function","name":"addingnotes","id":rowidnumber},{"label":"View Comments","type":"invoke.function","name":"rowcomments","id":rowidnumber},{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowidnumber}}});
}
else if(statusname != "NULL" && notesid != 0)
{
	elements.add({"type":"buttons","buttons":{{"label":"Add Notes","type":"invoke.function","name":"addingnotes","id":rowidnumber},{"label":"Mark as Completed","type":"invoke.function","name":"statuscompleted","id":rowidnumber},{"label":"View Comments","type":"invoke.function","name":"rowcomments","id":rowidnumber},{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowidnumber}}});
}
elements.add({"type":"divider"});
l = Map();
l.put("type","section");
l.put("elements",elements);
if(response.get("message") == "SUCCESS")
{
	l.put("status",{"text":notesname + " Added Successfully","type":"success"});
}
//info l;
return l;
]]></script>
</executor>
</executors>
</function>
<function>
<name>EditingChannel</name>
<id>4878936000000106139</id>
<description><![CDATA[Edits the channel for mapping]]></description>
<type>2000</type>
<executors>
<executor>
<handlertype>2000</handlertype>
<type>0</type>
<script><![CDATA[r = Map();
webhook = arguments.get("key");
//{"type":"dynamic_select","name":"Sheet","label":"SheetList","hint":" ","placeholder":sheetname,"mandatory":true,"disabled":true,"value":"sid","options":sheetids},
form = {"name":webhook,"type":"form","title":"Notifications","button_label":"Submit","inputs":{{"name":"channels","label":"Mapping Channel","extension_association":true,"placeholder":"Select the sheet","multiple":false,"mandatory":true,"type":"native_select","data_source":"channels"}},"action":{"type":"invoke.function","name":"EditedChannelToDB"}};
return form;
]]></script>
</executor>
</executors>
</function>
<function>
<name>UnmappingChannel</name>
<id>4878936000000106137</id>
<description><![CDATA[Deleting the mapped channel from "Notification" Data Base]]></description>
<type>2000</type>
<executors>
<executor>
<handlertype>2000</handlertype>
<type>0</type>
<script><![CDATA[webhooks = arguments.get("key").toNumber();
response = Map();
query_mapn = Map();
criteria_stringn = "webhookid==" + webhooks;
query_mapn.put("criteria",criteria_stringn);
response_mapn = zoho.cliq.getRecords("notifications",query_mapn);
if(response_mapn.get("status").equalsIgnoreCase("SUCCESS") && response_mapn.get("list").size() > 0)
{
	record_id = response_mapn.get("list").get(0).get("id");
}
channeluniquename = response_mapn.get("list").get(0).get("uniquename");
sheetname = response_mapn.get("list").get(0).get("sheetname");
info webhooks;
header_data = Map();
header_data.put("Content-Type","application/json");
parm = Map();
parm.put("enabled",false);
response1 = invokeurl
[
	url :"https://api.smartsheet.com/2.0/webhooks/" + webhooks
	type :PUT
	parameters:parm.toString()
	headers:header_data
	connection:"test1"
];
info response1;
if(response1.get("message") == "SUCCESS")
{
	response2 = invokeurl
	[
		url :"https://api.smartsheet.com/2.0/webhooks/" + webhooks
		type :DELETE
		connection:"test1"
	];
	info response2;
}
if(record_id.length() > 0)
{
	c = zoho.cliq.deleteRecord("notifications",record_id);
}
info c;
if(c.get("status") == "success")
{
	response.put("text","Unmapping is successful");
	zoho.cliq.postToChannel(channeluniquename,{"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"text":"This Channel is Unmapped from *Smart Sheet's* " + sheetname + " by " + user.get("first_name")});
}
else
{
	response.put("text","Opps there is an error Please come and try again");
}
return response;
]]></script>
</executor>
</executors>
</function>
<function>
<name>rowcomments</name>
<id>4878936000000106135</id>
<description><![CDATA[Comments in Sheets]]></description>
<type>2010</type>
<executors>
<executor>
<handlertype>2010</handlertype>
<type>0</type>
<script><![CDATA[info target;
response = Map();
//response.put("text",target);
l = Map();
// --------->Gets the data from Default Id DB
query_mape = Map();
criteria_stringe = "userid==" + user.get("id");
query_mape.put("criteria",criteria_stringe);
defaultids = zoho.cliq.getRecords("defaultiddb",query_mape).get("list").get(0);
info defaultids;
sheetname = defaultids.get("sheetname");
info sheetname;
sheetid = defaultids.get("sheetid");
info sheetid;
info target.get("id");
// ---------->Gets the data from Equivalent
query_mapt = Map();
criteria_stringt = "userid==" + user.get("id") + "&& field==Widget";
query_mapt.put("criteria",criteria_stringt);
EquivalentColumns = zoho.cliq.getRecords("equivalentcolumns",query_mapt).get("list").get(0);
taskid = EquivalentColumns.get("taskid");
taskname = EquivalentColumns.get("task");
assigneeid = EquivalentColumns.get("assigneeid");
statusname = EquivalentColumns.get("status");
duedateid = EquivalentColumns.get("duedateid");
// -------------> Gets the data from Additional Columns
query_mapw = Map();
criteria_stringw = "userid==" + user.get("id") + "&& field==Widget";
query_mapw.put("criteria",criteria_stringw);
AdditionalColumns = zoho.cliq.getRecords("additionalfields",query_mapw).get("list").get(0);
notesname = AdditionalColumns.get("notes");
notesid = AdditionalColumns.get("notesid");
TaskID = EquivalentColumns.get("taskid");
Duedate = EquivalentColumns.get("duedate");
AssigneeName = EquivalentColumns.get("assignee");
TaskName = EquivalentColumns.get("task");
addval = List();
if(AdditionalColumns.get("addone") != "NULL")
{
	addval.add(AdditionalColumns.get("addoneid"));
}
if(AdditionalColumns.get("addtwo") != "NULL")
{
	addval.add(AdditionalColumns.get("addtwoid"));
}
if(AdditionalColumns.get("addthree") != "NULL")
{
	addval.add(AdditionalColumns.get("addthreeid"));
}
//info addval;
response1 = invokeurl
[
	url :"https://api.smartsheet.com/2.0/sheets/" + sheetid
	type :GET
	connection:"test1"
];
//info response1.toMap();
for each  element in response1.get("rows")
{
	if(element.get("id") == target.get("id").toNumber())
	{
		info target.get("id") + "_" + element.get("id");
		cgi = element;
		for each  ele in element.get("cells")
		{
			if(ele.get("columnId") == taskid)
			{
				taskvalue = ele.get("value");
			}
			if(ele.get("columnId") == duedateid)
			{
				//info ele.get("value");
				if(ele.get("value") == NULL)
				{
					duedatevalue = "-";
				}
				else
				{
					date = ele.get("value");
					date1 = date.toDate();
					duedatevalue = date1;
				}
			}
			if(ele.get("columnId") == assigneeid)
			{
				//info ele.get("value");
				if(ele.get("value") == NULL)
				{
					assigneevalue = "Not Assigned";
				}
				else
				{
					assigneevalue = ele.get("displayValue");
				}
			}
			if(ele.get("columnId") == notesid)
			{
				//info ele.get("value");
				if(ele.get("value") == NULL)
				{
					c = "Add notes";
				}
				else
				{
					c = ele.get("value");
					//info c;
				}
			}
		}
	}
}
elements = list();
sections = Map();
elements.add({"type":"text","text":TaskName + ": " + taskvalue});
elements.add({"type":"text","text":Duedate + ": " + duedatevalue});
elements.add({"type":"text","text":AssigneeName + ": " + assigneevalue});
for each  i in addval
{
	for each  element in cgi.get("cells")
	{
		info element;
		if(element.get("columnId") == i)
		{
			if(element.get("value").isNull())
			{
				val = "-";
			}
			else
			{
				val = element.get("value");
			}
			info val;
			g = AdditionalColumns.getkey(i);
			g1 = g.toList("i");
			ng = g1.get(0);
			info AdditionalColumns.get(ng);
			elements.add({"type":"text","text":AdditionalColumns.get(ng) + ": " + val});
		}
	}
}
rowid = target.get("id").toNumber();
info rowid;
response2 = invokeurl
[
	url :"https://api.smartsheet.com/2.0/sheets/" + sheetid + "/rows/" + rowid + "/discussions"
	type :GET
	connection:"test1"
];
message = Collection();
info response2;
if(response2.get("totalCount") == 0)
{
	elements.add({"type":"text","text":"Comments:"});
	elements.add({"type":"subtext","text":"No Comments"});
}
else
{
	elements.add({"type":"text","text":"Comments:"});
	for each  element in response2.get("data")
	{
		info element;
		name = element.get("lastCommentedUser").get("name");
		chat = element.get("title");
		d1 = element.get("lastCommentedAt");
		s = d1.toList("T");
		g1 = s.get(0).toDate();
		h1 = s.get(1).toList("Z");
		datetime1 = g1 + " " + h1;
		newd = datetime1.addHour(5).addMinutes(30);
		newdate = toString(newd,"dd-MMM-yyyy, hh:mm a");
		//info chat;
		message.add(newdate + "_" + name + "_" + chat);
		info message;
	}
	g = 1;
	info c;
	for each  ele in message
	{
		val = ele.toList("_");
		if(g == 5)
		{
			break;
		}
		else
		{
			g = g + 1;
		}
		name = val.get(1);
		chat = val.get(2);
		datetime = val.get(0);
		newval = chat + "   -- " + datetime;
		elements.add({"type":"text","text":name});
		elements.add({"type":"subtext","text":"  >>   " + newval});
	}
}
if(statusname == "NULL" && notesid != 0)
{
	elements.add({"type":"buttons","buttons":{{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowid},{"label":"View Notes","type":"invoke.function","name":"viewingnotes","id":rowid},{"label":"Add Notes","type":"invoke.function","name":"addingnotes","id":rowid}}});
}
else if(statusname != "NULL" && notesid != 0)
{
	elements.add({"type":"buttons","buttons":{{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowid},{"label":"Mark as Completed","type":"invoke.function","name":"statuscompleted","id":rowid},{"label":"View Notes","type":"invoke.function","name":"viewingnotes","id":rowid},{"label":"Add Notes","type":"invoke.function","name":"addingnotes","id":rowid}}});
}
else if(statusname != "NULL" && notesid == 0)
{
	elements.add({"type":"buttons","buttons":{{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowid},{"label":"Mark as Completed","type":"invoke.function","name":"statuscompleted","id":rowid}}});
}
else if(statusname == "NULL" && notesid == 0)
{
	elements.add({"type":"buttons","buttons":{{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowid}}});
}
elements.add({"type":"divider"});
l = Map();
l.put("type","section");
l.put("elements",elements);
info l;
return l;
]]></script>
</executor>
</executors>
</function>
<function>
<name>addingcomments</name>
<id>4878936000000106133</id>
<description><![CDATA[Creates a form to get comments]]></description>
<type>2010</type>
<executors>
<executor>
<handlertype>2010</handlertype>
<type>0</type>
<script><![CDATA[response = Map();
query_mapw = Map();
criteria_stringw = "userid==" + user.get("id") + " && field==Widget";
query_mapw.put("criteria",criteria_stringw);
notename = zoho.cliq.getRecords("equivalentcolumns",query_mapw).get("list").get(0).get("notes");
info target.get("id");
inputs = list();
inputs.add({"type":"textarea","name":"note","label":"Add Comment","hint":"","placeholder":"Enter your Comment here","mandatory":true,"value":""});
form = {"type":"form","title":"Comments","hint":"","name":target.get("id"),"version":1,"button_label":"Add Comment","action":{"type":"invoke.function","name":"commentstosheets"},"inputs":inputs};
return form;
]]></script>
</executor>
</executors>
</function>
<function>
<name>commentstosheets</name>
<id>4878936000000106131</id>
<description><![CDATA[Gets the comment and adds to sheet]]></description>
<type>2001</type>
<executors>
<executor>
<handlertype>2001</handlertype>
<type>0</type>
<script><![CDATA[response = Map();
info form;
rowidnumber = form.get("name").toNumber();
notes = form.get("values").get("note");
info notes;
info rowidnumber;
l = Map();
// --------->Gets the data from Default Id DB
query_mape = Map();
criteria_stringe = "userid==" + user.get("id");
query_mape.put("criteria",criteria_stringe);
defaultids = zoho.cliq.getRecords("defaultiddb",query_mape).get("list").get(0);
info defaultids;
sheetname = defaultids.get("sheetname");
info sheetname;
sheetid = defaultids.get("sheetid");
// ---------->Gets the data from Equivalent
query_mapt = Map();
criteria_stringt = "userid==" + user.get("id") + "&& field==Widget";
query_mapt.put("criteria",criteria_stringt);
EquivalentColumns = zoho.cliq.getRecords("equivalentcolumns",query_mapt).get("list").get(0);
taskid = EquivalentColumns.get("taskid");
taskname = EquivalentColumns.get("task");
assigneeid = EquivalentColumns.get("assigneeid");
statusname = EquivalentColumns.get("status");
duedateid = EquivalentColumns.get("duedateid");
// -------------> Gets the data from Additional Columns
query_mapw = Map();
criteria_stringw = "userid==" + user.get("id") + "&& field==Widget";
query_mapw.put("criteria",criteria_stringw);
AdditionalColumns = zoho.cliq.getRecords("additionalfields",query_mapw).get("list").get(0);
notesname = AdditionalColumns.get("notes");
notesid = AdditionalColumns.get("notesid");
TaskID = EquivalentColumns.get("taskid");
Duedate = EquivalentColumns.get("duedate");
AssigneeName = EquivalentColumns.get("assignee");
TaskName = EquivalentColumns.get("task");
addval = List();
if(AdditionalColumns.get("addone") != "NULL")
{
	addval.add(AdditionalColumns.get("addoneid"));
}
if(AdditionalColumns.get("addtwo") != "NULL")
{
	addval.add(AdditionalColumns.get("addtwoid"));
}
if(AdditionalColumns.get("addthree") != "NULL")
{
	addval.add(AdditionalColumns.get("addthreeid"));
}
info addval;
header_data = Map();
header_data.put("Content-Type","application/json");
param = Map();
val = Map();
val.put("text",notes);
param.put("comment",val);
info param;
response2 = invokeurl
[
	url :"https://api.smartsheet.com/2.0/sheets/" + sheetid + "/rows/" + rowidnumber + "/discussions"
	type :POST
	parameters:param.toString()
	headers:header_data
	connection:"test1"
];
response3 = invokeurl
[
	url :"https://api.smartsheet.com/2.0/sheets/" + sheetid + "/rows/" + rowidnumber + "/discussions"
	type :GET
	connection:"test1"
];
info response2;
response1 = invokeurl
[
	url :"https://api.smartsheet.com/2.0/sheets/" + sheetid
	type :GET
	connection:"test1"
];
//info response1.toMap();
for each  element in response1.get("rows")
{
	if(element.get("id") == rowidnumber)
	{
		cgi = element;
		for each  ele in element.get("cells")
		{
			if(ele.get("columnId") == taskid)
			{
				taskvalue = ele.get("value");
			}
			if(ele.get("columnId") == duedateid)
			{
				//info ele.get("value");
				if(ele.get("value") == NULL)
				{
					duedatevalue = "-";
				}
				else
				{
					date = ele.get("value");
					date1 = date.toDate();
					duedatevalue = date1;
				}
			}
			if(ele.get("columnId") == assigneeid)
			{
				//info ele.get("value");
				if(ele.get("value") == NULL)
				{
					assigneevalue = "Not Assigned";
				}
				else
				{
					assigneevalue = ele.get("displayValue");
				}
			}
		}
	}
}
elements = list();
sections = Map();
elements.add({"type":"text","text":TaskName + ": " + taskvalue});
elements.add({"type":"text","text":Duedate + ": " + duedatevalue});
elements.add({"type":"text","text":AssigneeName + ": " + assigneevalue});
for each  i in addval
{
	for each  element in cgi.get("cells")
	{
		info element;
		if(element.get("columnId") == i)
		{
			if(element.get("value").isNull())
			{
				val = "-";
			}
			else
			{
				val = element.get("value");
			}
			info val;
			g = AdditionalColumns.getkey(i);
			g1 = g.toList("i");
			ng = g1.get(0);
			info AdditionalColumns.get(ng);
			elements.add({"type":"text","text":AdditionalColumns.get(ng) + ": " + val});
		}
	}
}
elements.add({"type":"text","text":"Comments"});
message = Collection();
for each  element in response3.get("data")
{
	info element;
	name = element.get("lastCommentedUser").get("name");
	chat = element.get("title");
	d1 = element.get("lastCommentedAt");
	s = d1.toList("T");
	g1 = s.get(0).toDate();
	h1 = s.get(1).toList("Z");
	datetime1 = g1 + " " + h1;
	newd = datetime1.addHour(5).addMinutes(30);
	newdate = toString(newd,"dd-MMM-yyyy, hh:mm a");
	//info chat;
	message.add(newdate + "_" + name + "_" + chat);
	info message;
}
g = 0;
for each  ele in message
{
	val = ele.toList("_");
	if(g == 5)
	{
		break;
	}
	else
	{
		g = g + 1;
	}
	name = val.get(1);
	chat = val.get(2);
	datetime = val.get(0);
	newval = chat + "   -- " + datetime;
	elements.add({"type":"text","text":name});
	elements.add({"type":"subtext","text":"  >>   " + newval});
}
if(statusname == "NULL" && notesid != 0)
{
	elements.add({"type":"buttons","buttons":{{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowidnumber},{"label":"View Notes","type":"invoke.function","name":"viewingnotes","id":rowidnumber},{"label":"Add Notes","type":"invoke.function","name":"addingnotes","id":rowidnumber}}});
}
else if(statusname != "NULL" && notesid != 0)
{
	elements.add({"type":"buttons","buttons":{{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowidnumber},{"label":"Mark as Completed","type":"invoke.function","name":"statuscompleted","id":rowidnumber},{"label":"View Notes","type":"invoke.function","name":"viewingnotes","id":rowidnumber},{"label":"Add Notes","type":"invoke.function","name":"addingnotes","id":rowidnumber}}});
}
else if(statusname != "NULL" && notesid == 0)
{
	elements.add({"type":"buttons","buttons":{{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowidnumber},{"label":"Mark as Completed","type":"invoke.function","name":"statuscompleted","id":rowidnumber}}});
}
else if(statusname == "NULL" && notesid == 0)
{
	elements.add({"type":"buttons","buttons":{{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowidnumber}}});
}
elements.add({"type":"divider"});
l = Map();
l.put("type","section");
l.put("elements",elements);
l.put("status",{"text":"Comment Added Successfully","type":"success"});
info l;
return l;
]]></script>
</executor>
</executors>
</function>
<function>
<name>footer</name>
<id>4878936000000106129</id>
<description><![CDATA[widget foter]]></description>
<type>2010</type>
<executors>
<executor>
<handlertype>2010</handlertype>
<type>0</type>
<script><![CDATA[id1 = target.get("id").tolist("_").get(1);
info target.get("id").tolist("_").get(0).toNumber();
pagenumber = target.get("id").tolist("_").get(2).toNumber();
r = Map();
sections = list();
username = list();
// --------->Gets the data from Default Id DB
query_mape = Map();
criteria_stringe = "userid==" + user.get("id");
query_mape.put("criteria",criteria_stringe);
defaultids = zoho.cliq.getRecords("defaultiddb",query_mape).get("list").get(0);
info defaultids;
sheetname = defaultids.get("sheetname");
info sheetname;
sheetid = defaultids.get("sheetid");
// ---------->Gets the data from Equivalent
query_mapt = Map();
criteria_stringt = "userid==" + user.get("id") + " && field==Widget";
query_mapt.put("criteria",criteria_stringt);
EquivalentColumns = zoho.cliq.getRecords("equivalentcolumns",query_mapt).get("list").get(0);
taskid = EquivalentColumns.get("taskid");
taskname = EquivalentColumns.get("task");
assigneeid = EquivalentColumns.get("assigneeid");
statusname = EquivalentColumns.get("status");
// -------------> Gets the data from Additional Columns
query_mapw = Map();
criteria_stringw = "userid==" + user.get("id") + " && field==Widget";
query_mapw.put("criteria",criteria_stringw);
AdditionalColumns = zoho.cliq.getRecords("additionalfields",query_mapw).get("list").get(0);
notesname = AdditionalColumns.get("notes");
notesid = AdditionalColumns.get("notesid");
addval = List();
if(AdditionalColumns.get("addone") != "NULL")
{
	addval.add(AdditionalColumns.get("addone"));
}
if(AdditionalColumns.get("addtwo") != "NULL")
{
	addval.add(AdditionalColumns.get("addtwo"));
}
if(AdditionalColumns.get("addthree") != "NULL")
{
	addval.add(AdditionalColumns.get("addthree"));
}
info addval;
l = Map();
useremail = invokeurl
[
	url :"https://api.smartsheet.com/2.0/users/me"
	type :GET
	connection:"test1"
];
emailid = useremail.get("email");
usernameval = useremail.get("firstName") + " " + useremail.get("lastName");
//info emailid;
response1 = invokeurl
[
	url :"https://api.smartsheet.com/2.0/sheets/" + sheetid
	type :GET
	connection:"test1"
];
rowmap = Map();
for each  element in response1.get("rows")
{
	rowid = element.get("id");
	for each  ele in element.get("cells")
	{
		//info ele;
		if(ele.get("columnId") == taskid && !isNull(ele.get("value")))
		{
			taskequivalentname = ele.get("value").toString();
			rowmap.put(taskequivalentname,rowid);
		}
	}
}
info rowmap;
Column = Map();
ColumnName = Map();
ColumnId = Map();
permalink = response1.get("permalink").toString();
header = {"title":"Page " + pagenumber,"navigation":"continue","buttons":{{"label":"Add Task","type":"invoke.function","name":"Widgetaddtaskform","id":"button12"},{"label":"View Sheet","type":"open.url","url":permalink}}};
pagenumber = pagenumber + 1;
columncount = 0;
//To make permalink in the view button of the widget
for each  column in response1.get("columns")
{
	columnid = column.get("id");
	columname = column.get("title");
	ColumnName.put(columname,columnid);
	//To get the id of the column using the name
	ColumnId.put(columnid,columname);
	columncount = columncount + 1;
	//To get the name of the column using the column id
}
Column = {"getbyName":ColumnName,"getbyID":ColumnId};
//info Column;
Rowmapval = Map();
rowid = 1;
list = List();
response_map1 = zoho.cliq.getRecords("equivalentcolumns");
WidgetColumnID = Column.get("getbyID");
//info WidgetColumnID;
TaskID = EquivalentColumns.get("taskid");
Duedate = EquivalentColumns.get("duedate");
AssigneeName = EquivalentColumns.get("assignee");
TaskName = EquivalentColumns.get("task");
info user.get("email");
list.add(TaskName);
list.add(Duedate);
list.add(AssigneeName);
//info list;
count = 0;
for each  row in response1.get("rows")
{
	//info row;
	rowidval = row.get("id");
	Row2 = Map();
	for each  cell in row.get("cells")
	{
		Row1 = Map();
		if(cell.get("columnId") == assigneeid)
		{
			colid = cell.get("columnId").toNumber();
			if(cell.get("value") == emailid)
			{
				count = count + 1;
				username.add(cell.get("displayValue"));
				colval = cell.get("value").toString();
				colname = Column.toMap().get("getbyID").get(colid).toString();
			}
			else
			{
				colval = cell.get("displayValue").toString();
				colname = Column.toMap().get("getbyID").get(colid).toString();
			}
		}
		else
		{
			colid = cell.get("columnId").toNumber();
			colval = cell.get("value").toString();
			colname = Column.toMap().get("getbyID").get(colid).toString();
		}
		//Row1.put("ColumnName",colname);
		//Row1.put("Columnvalue",colval);
		Row2.put(colname,colval);
		Row2.put("Rowid",rowidval);
		//id= id+1;
	}
	//info Row2;
	Rowmapval.put(rowid,Row2);
	// To store the rows with the column name and column value 
	rowid = rowid + 1;
}
nusername = username.distinct();
info nusername;
if(id1 == "homeTab")
{
	if(EquivalentColumns.get("statusid") == 0 && notesid == 0)
	{
		val = 1;
		count1 = 0;
		for each  element in Rowmapval
		{
			//info element;
			elements = list();
			if(element.get(TaskName).isNull())
			{
				continue;
			}
			//info element.get(TaskName);
			count1 = count1 + 1;
			flag = 0;
			info element;
			for each  ele in element
			{
				if(ele == NULL)
				{
					flag = flag + 1;
				}
			}
			//info element;
			if(flag == columncount - 1)
			{
				elements.add({"type":"title","text":element.get(TaskName)});
			}
			else
			{
				if(!element.get(Duedate).isNull())
				{
					date = element.get(Duedate).toDate();
					DateChange = date;
					//info DateChange.toString();
				}
				else
				{
					DateChange = "-";
				}
				if(element.get(AssigneeName).isNull())
				{
					Assigneename = "Not Assigned";
				}
				else
				{
					if(element.get(AssigneeName) == emailid)
					{
						Assigneename = usernameval;
					}
					else
					{
						Assigneename = element.get(AssigneeName);
					}
				}
				elements.add({"type":"text","text":TaskName + ": " + element.get(TaskName)});
				elements.add({"type":"text","text":Duedate + ": " + DateChange});
				elements.add({"type":"text","text":AssigneeName + ": " + Assigneename});
				for each  i in addval
				{
					if(element.get(i).isNull())
					{
						addone = "-";
					}
					else
					{
						addone = element.get(i).toString();
					}
					elements.add({"type":"text","text":i + ": " + addone});
				}
				val1 = element.get(TaskName);
				//info val1;
				rowidnumber = element.get("Rowid");
				//info rowidnumber;
				elements.add({"type":"buttons","buttons":{{"label":"View Comments","type":"invoke.function","name":"rowcomments","id":rowidnumber},{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowidnumber}}});
				elements.add({"type":"divider"});
			}
			sections.add({"id":val,"elements":elements});
			val = val + 1;
			//info elements;
		}
		info count1;
		info sections;
	}
	else if(EquivalentColumns.get("statusid") == 0 && notesid != 0)
	{
		count1 = 0;
		val = 1;
		for each  element in Rowmapval
		{
			//info element;
			elements = list();
			//info element.get("Tasks");
			if(element.get(TaskName).isNull())
			{
				continue;
			}
			count1 = count1 + 1;
			flag = 0;
			//info element;
			for each  ele in element
			{
				if(ele == NULL)
				{
					flag = flag + 1;
				}
			}
			//info element;
			if(flag == columncount - 1)
			{
				elements.add({"type":"title","text":element.get(TaskName)});
			}
			else
			{
				if(!element.get(Duedate).isNull())
				{
					date = element.get(Duedate).toDate();
					DateChange = date;
					//info DateChange.toString();
				}
				else
				{
					DateChange = "-";
				}
				if(element.get(AssigneeName).isNull())
				{
					Assigneename = "Not Assigned";
				}
				else
				{
					if(element.get(AssigneeName) == emailid)
					{
						Assigneename = usernameval;
					}
					else
					{
						Assigneename = element.get(AssigneeName);
					}
				}
				elements.add({"type":"text","text":TaskName + ": " + element.get(TaskName)});
				elements.add({"type":"text","text":Duedate + ": " + DateChange});
				elements.add({"type":"text","text":AssigneeName + ": " + Assigneename});
				for each  i in addval
				{
					if(element.get(i).isNull())
					{
						addone = "-";
					}
					else
					{
						addone = element.get(i).toString();
					}
					elements.add({"type":"text","text":i + ": " + addone});
				}
				val1 = element.get(TaskName);
				//info val1;
				rowidnumber = element.get("Rowid");
				//info rowidnumber;
				elements.add({"type":"buttons","buttons":{{"label":"View Comments","type":"invoke.function","name":"rowcomments","id":rowidnumber},{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowidnumber},{"label":"View Notes","type":"invoke.function","name":"viewingnotes","id":rowidnumber},{"label":"Add Notes","type":"invoke.function","name":"addingnotes","id":rowidnumber}}});
				elements.add({"type":"divider"});
			}
			sections.add({"id":val,"elements":elements});
			val = val + 1;
			//info elements;
		}
	}
	else if(EquivalentColumns.get("statusid") != 0 && notesid == 0)
	{
		val = 1;
		count1 = 0;
		for each  element in Rowmapval
		{
			//info element;
			if(element.get(statusname) == "Complete" || element.get(statusname) == "Completed")
			{
				continue;
			}
			else
			{
				elements = list();
				//info element.get("Tasks");
				if(element.get(TaskName).isNull())
				{
					continue;
				}
				count1 = count1 + 1;
				flag = 0;
				//info element;
				for each  ele in element
				{
					if(ele == NULL)
					{
						flag = flag + 1;
					}
				}
				//info element;
				if(flag == columncount - 1)
				{
					elements.add({"type":"title","text":element.get(TaskName)});
				}
				else
				{
					if(!element.get(Duedate).isNull())
					{
						date = element.get(Duedate).toDate();
						DateChange = date;
						//info DateChange.toString();
					}
					else
					{
						DateChange = "-";
					}
					if(element.get(AssigneeName).isNull())
					{
						Assigneename = "Not Assigned";
					}
					else
					{
						if(element.get(AssigneeName) == emailid)
						{
							Assigneename = usernameval;
						}
						else
						{
							Assigneename = element.get(AssigneeName);
						}
					}
					elements.add({"type":"text","text":TaskName + ": " + element.get(TaskName)});
					elements.add({"type":"text","text":Duedate + ": " + DateChange});
					elements.add({"type":"text","text":AssigneeName + ": " + Assigneename});
					for each  i in addval
					{
						if(element.get(i).isNull())
						{
							addone = "-";
						}
						else
						{
							addone = element.get(i).toString();
						}
						elements.add({"type":"text","text":i + ": " + addone});
					}
					val1 = element.get(TaskName);
					//info val1;
					rowidnumber = element.get("Rowid");
					//info rowidnumber;
					elements.add({"type":"buttons","buttons":{{"label":"Mark as Completed","type":"invoke.function","name":"statuscompleted","id":rowidnumber},{"label":"View Comments","type":"invoke.function","name":"rowcomments","id":rowidnumber},{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowidnumber}}});
					elements.add({"type":"divider"});
				}
				sections.add({"id":val,"elements":elements});
				val = val + 1;
			}
		}
	}
	else if(EquivalentColumns.get("statusid") != 0 && notesid != 0)
	{
		val = 1;
		count1 = 0;
		for each  element in Rowmapval
		{
			//info element;
			if(element.get(statusname) == "Complete" || element.get(statusname) == "Completed")
			{
				continue;
			}
			else
			{
				elements = list();
				//info element.get("Tasks");
				if(element.get(TaskName).isNull())
				{
					continue;
				}
				count1 = count1 + 1;
				flag = 0;
				//info element;
				for each  ele in element
				{
					if(ele == NULL)
					{
						flag = flag + 1;
					}
				}
				//info element;
				if(flag == columncount - 1)
				{
					elements.add({"type":"title","text":element.get(TaskName)});
				}
				else
				{
					if(!element.get(Duedate).isNull())
					{
						date = element.get(Duedate).toDate();
						DateChange = date;
						//info DateChange.toString();
					}
					else
					{
						DateChange = "-";
					}
					if(element.get(AssigneeName).isNull())
					{
						Assigneename = "Not Assigned";
					}
					else
					{
						if(element.get(AssigneeName) == emailid)
						{
							Assigneename = usernameval;
						}
						else
						{
							Assigneename = element.get(AssigneeName);
						}
					}
					elements.add({"type":"text","text":TaskName + ": " + element.get(TaskName)});
					elements.add({"type":"text","text":Duedate + ": " + DateChange});
					elements.add({"type":"text","text":AssigneeName + ": " + Assigneename});
					for each  i in addval
					{
						if(element.get(i).isNull())
						{
							addone = "-";
						}
						else
						{
							addone = element.get(i).toString();
						}
						elements.add({"type":"text","text":i + ": " + addone});
					}
					val1 = element.get(TaskName);
					//info val1;
					rowidnumber = element.get("Rowid");
					//info rowidnumber;
					elements.add({"type":"buttons","buttons":{{"label":"Mark as Completed","type":"invoke.function","name":"statuscompleted","id":rowidnumber},{"label":"View Comments","type":"invoke.function","name":"rowcomments","id":rowidnumber},{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowidnumber},{"label":"View Notes","type":"invoke.function","name":"viewingnotes","id":rowidnumber},{"label":"Add Notes","type":"invoke.function","name":"addingnotes","id":rowidnumber}}});
					elements.add({"type":"divider"});
				}
				sections.add({"id":val,"elements":elements});
				val = val + 1;
			}
		}
	}
	if(count1 == 0)
	{
		applet = {"type":"applet","data_type":"info","info":{"title":"No task found","description":" ","image_url":"https://www.harmonyd.com/wp-content/uploads/2017/05/smart-sheet-logo.png"},"tabs":{{"label":"My " + taskname,"id":"mytask"},{"label":taskname,"id":"homeTab"}},"active_tab":"hometab"};
		info applet;
	}
	else
	{
		id = target.get("id").toList("_").get(0).toNumber();
		len = sections.size();
		info len;
		length = len - id;
		g = sections.subList(id,len);
		info g;
		info length;
		if(length > 12)
		{
			buttons = List();
			buttons.add({"label":"Next","type":"invoke.function","name":"footer","id":id + 12 + "_homeTab_" + pagenumber});
			footer = {"buttons":buttons};
			applet = {"type":"applet","tabs":{{"label":"My " + taskname,"id":"mytask"},{"label":taskname,"id":"homeTab"}},"active_tab":"homeTab","header":header,"footer":footer,"sections":sections.subList(id,id + 12)};
		}
		else
		{
			applet = {"type":"applet","tabs":{{"label":"My " + taskname,"id":"mytask"},{"label":taskname,"id":"homeTab"}},"active_tab":"homeTab","header":header,"sections":g};
			info applet;
		}
	}
}
else
{
	if(nusername.size() == 0)
	{
		applet = {"type":"applet","data_type":"info","info":{"title":"No task found","description":" ","image_url":"https://www.harmonyd.com/wp-content/uploads/2017/05/smart-sheet-logo.png"},"tabs":{{"label":"My " + taskname,"id":"mytask"},{"label":taskname,"id":"homeTab"}},"active_tab":"mytask"};
		return applet;
	}
	if(EquivalentColumns.get("statusid") == 0 && notesid == 0)
	{
		count1 = 0;
		val = 1;
		for each  element in Rowmapval
		{
			elements = list();
			info element;
			//info element.get("Tasks");
			//info element.get(AssigneeName);
			if(element.get(TaskName).isNull() || element.get(AssigneeName).isNull())
			{
				continue;
			}
			flag = 0;
			info element;
			for each  ele in element
			{
				if(ele == NULL)
				{
					flag = flag + 1;
				}
			}
			//info element;
			if(flag == columncount - 1)
			{
				elements.add({"type":"title","text":element.get(TaskName)});
			}
			else
			{
				info element;
				if(!element.get(Duedate).isNull())
				{
					date = element.get(Duedate).toDate();
					DateChange = date;
					//info DateChange;
					//info DateChange.toString();
				}
				else
				{
					DateChange = "-";
				}
				if(element.get(AssigneeName).isNull())
				{
					continue;
				}
				if(element.get(AssigneeName) == emailid)
				{
					Assigneename = usernameval;
				}
				else
				{
					continue;
				}
				count1 = count1 + 1;
				elements.add({"type":"text","text":TaskName + ": " + element.get(TaskName)});
				elements.add({"type":"text","text":Duedate + ": " + DateChange});
				elements.add({"type":"text","text":AssigneeName + ": " + Assigneename});
				for each  i in addval
				{
					if(element.get(i).isNull())
					{
						addone = "-";
					}
					else
					{
						addone = element.get(i).toString();
					}
					elements.add({"type":"text","text":i + ": " + addone});
				}
				val1 = element.get(TaskName);
				//info val1;
				rowidnumber = element.get("Rowid");
				//info rowidnumber;
				elements.add({"type":"buttons","buttons":{{"label":"View Comments","type":"invoke.function","name":"rowcomments","id":rowidnumber},{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowidnumber}}});
				elements.add({"type":"divider"});
			}
			sections.add({"id":val,"elements":elements});
			val = val + 1;
			//info elements;
		}
		info count;
	}
	else if(EquivalentColumns.get("statusid") == 0 && notesid != 0)
	{
		count1 = 0;
		val = 1;
		for each  element in Rowmapval
		{
			elements = list();
			info element;
			//info element.get("Tasks");
			//info element.get(AssigneeName);
			if(element.get(TaskName).isNull() || element.get(AssigneeName).isNull())
			{
				continue;
			}
			flag = 0;
			info element;
			for each  ele in element
			{
				if(ele == NULL)
				{
					flag = flag + 1;
				}
			}
			//info element;
			if(flag == columncount - 1)
			{
				elements.add({"type":"title","text":element.get(TaskName)});
			}
			else
			{
				info element;
				if(!element.get(Duedate).isNull())
				{
					date = element.get(Duedate).toDate();
					DateChange = date;
					//info DateChange;
					//info DateChange.toString();
				}
				else
				{
					DateChange = "-";
				}
				if(element.get(AssigneeName).isNull())
				{
					continue;
				}
				if(element.get(AssigneeName) == emailid)
				{
					Assigneename = usernameval;
				}
				else
				{
					continue;
				}
				count1 = count1 + 1;
				elements.add({"type":"text","text":TaskName + ": " + element.get(TaskName)});
				elements.add({"type":"text","text":Duedate + ": " + DateChange});
				elements.add({"type":"text","text":AssigneeName + ": " + Assigneename});
				for each  i in addval
				{
					if(element.get(i).isNull())
					{
						addone = "-";
					}
					else
					{
						addone = element.get(i).toString();
					}
					elements.add({"type":"text","text":i + ": " + addone});
				}
				val1 = element.get(TaskName);
				//info val1;
				rowidnumber = element.get("Rowid");
				//info rowidnumber;
				elements.add({"type":"buttons","buttons":{{"label":"View Comments","type":"invoke.function","name":"rowcomments","id":rowidnumber},{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowidnumber},{"label":"View Notes","type":"invoke.function","name":"viewingnotes","id":rowidnumber},{"label":"Add Notes","type":"invoke.function","name":"addingnotes","id":rowidnumber}}});
				elements.add({"type":"divider"});
			}
			sections.add({"id":val,"elements":elements});
			val = val + 1;
			//info elements;
		}
	}
	else if(EquivalentColumns.get("statusid") != 0 && notesid == 0)
	{
		val = 1;
		count1 = 0;
		for each  element in Rowmapval
		{
			//info element;
			if(element.get(statusname) == "Complete" || element.get(statusname) == "Completed")
			{
				continue;
			}
			else
			{
				elements = list();
				info element;
				//info element.get("Tasks");
				//info element.get(AssigneeName);
				if(element.get(TaskName).isNull() || element.get(AssigneeName).isNull())
				{
					continue;
				}
				flag = 0;
				info element;
				for each  ele in element
				{
					if(ele == NULL)
					{
						flag = flag + 1;
					}
				}
				//info element;
				if(flag == columncount - 1)
				{
					elements.add({"type":"title","text":element.get(TaskName)});
				}
				else
				{
					info element;
					if(!element.get(Duedate).isNull())
					{
						date = element.get(Duedate).toDate();
						DateChange = date;
						//info DateChange;
						//info DateChange.toString();
					}
					else
					{
						DateChange = "-";
					}
					if(element.get(AssigneeName).isNull())
					{
						continue;
					}
					if(element.get(AssigneeName) == emailid)
					{
						Assigneename = usernameval;
					}
					else
					{
						continue;
					}
					count1 = count1 + 1;
					elements.add({"type":"text","text":TaskName + ": " + element.get(TaskName)});
					elements.add({"type":"text","text":Duedate + ": " + DateChange});
					elements.add({"type":"text","text":AssigneeName + ": " + Assigneename});
					for each  i in addval
					{
						if(element.get(i).isNull())
						{
							addone = "-";
						}
						else
						{
							addone = element.get(i).toString();
						}
						elements.add({"type":"text","text":i + ": " + addone});
					}
					val1 = element.get(TaskName);
					//info val1;
					rowidnumber = element.get("Rowid");
					//info rowidnumber;
					elements.add({"type":"buttons","buttons":{{"label":"Mark as Completed","type":"invoke.function","name":"statuscompleted","id":rowidnumber},{"label":"View Comments","type":"invoke.function","name":"rowcomments","id":rowidnumber},{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowidnumber}}});
					elements.add({"type":"divider"});
				}
				sections.add({"id":val,"elements":elements});
				val = val + 1;
			}
		}
	}
	else if(EquivalentColumns.get("statusid") != 0 && notesid != 0)
	{
		val = 1;
		count1 = 0;
		for each  element in Rowmapval
		{
			info element;
			if(element.get(statusname) == "Complete" || element.get(statusname) == "Completed")
			{
				info "Complete";
				continue;
			}
			else
			{
				elements = list();
				info element;
				//info element.get("Tasks");
				//info element.get(AssigneeName);
				if(element.get(TaskName).isNull() || element.get(AssigneeName).isNull())
				{
					continue;
				}
				flag = 0;
				info element;
				for each  ele in element
				{
					if(ele == NULL)
					{
						flag = flag + 1;
					}
				}
				//info element;
				if(flag == columncount - 1)
				{
					elements.add({"type":"title","text":element.get(TaskName)});
				}
				else
				{
					info element;
					if(!element.get(Duedate).isNull())
					{
						date = element.get(Duedate).toDate();
						DateChange = date;
						//info DateChange;
						//info DateChange.toString();
					}
					else
					{
						DateChange = "-";
					}
					if(element.get(AssigneeName).isNull())
					{
						continue;
					}
					if(element.get(AssigneeName) == emailid)
					{
						Assigneename = usernameval;
					}
					else
					{
						continue;
					}
					count1 = count1 + 1;
					elements.add({"type":"text","text":TaskName + ": " + element.get(TaskName)});
					elements.add({"type":"text","text":Duedate + ": " + DateChange});
					elements.add({"type":"text","text":AssigneeName + ": " + Assigneename});
					for each  i in addval
					{
						if(element.get(i).isNull())
						{
							addone = "-";
						}
						else
						{
							addone = element.get(i).toString();
						}
						elements.add({"type":"text","text":i + ": " + addone});
					}
					val1 = element.get(TaskName);
					//info val1;
					rowidnumber = element.get("Rowid");
					//info rowidnumber;
					elements.add({"type":"buttons","buttons":{{"label":"Mark as Completed","type":"invoke.function","name":"statuscompleted","id":rowidnumber},{"label":"View Comments","type":"invoke.function","name":"rowcomments","id":rowidnumber},{"label":"Add Comment","type":"invoke.function","name":"addingcomments","id":rowidnumber},{"label":"View Notes","type":"invoke.function","name":"viewingnotes","id":rowidnumber},{"label":"Add Notes","type":"invoke.function","name":"addingnotes","id":rowidnumber}}});
					elements.add({"type":"divider"});
				}
				sections.add({"id":val,"elements":elements});
				val = val + 1;
			}
		}
	}
	info count1;
	if(count1 == 0)
	{
		applet = {"type":"applet","data_type":"info","info":{"title":"No task found","description":" ","image_url":"https://www.harmonyd.com/wp-content/uploads/2017/05/smart-sheet-logo.png"},"tabs":{{"label":"My " + taskname,"id":"mytask"},{"label":taskname,"id":"homeTab"}},"active_tab":"mytask"};
	}
	else
	{
		id = target.get("id").toList("_").get(0).toNumber();
		len = sections.size();
		info len;
		length = len - id;
		g = sections.subList(id,id + 12);
		info g;
		info length;
		if(length > 12)
		{
			buttons = List();
			buttons.add({"label":"Next","type":"invoke.function","name":"footer","id":id + 12 + "_mytask_" + pagenumber});
			footer = {"buttons":buttons};
			applet = {"type":"applet","tabs":{{"label":"My " + taskname,"id":"mytask"},{"label":taskname,"id":"homeTab"}},"active_tab":"mytask","header":header,"footer":footer,"sections":sections.subList(id,id + 12)};
		}
		else
		{
			applet = {"type":"applet","tabs":{{"label":"My " + taskname,"id":"mytask"},{"label":taskname,"id":"homeTab"}},"active_tab":"mytask","header":header,"sections":sections.subList(id,len)};
		}
	}
}
return applet;
]]></script>
</executor>
</executors>
</function>
<function>
<name>FormFunctions</name>
<id>4878936000000106127</id>
<description><![CDATA[It does all the form functions]]></description>
<type>2001</type>
<executors>
<executor>
<handlertype>2001</handlertype>
<type>0</type>
<script><![CDATA[r = Map();
info form;
name = form.get("name");
// --------------->  CONFIGURATIONS MENU ACTION OF THE BOT
//Gets the workspace and sheet details and sends to another form
if(name == "Workspace")
{
	response = Map();
	info form;
	SheetName = form.get("values").get("Sheet").get("label").toString();
	SheetId = form.get("values").get("Sheet").get("value").toNumber();
	//	WorkspaceName = form.get("values").get("Workspace").get("label").toString();
	//	WorkspaceId = form.get("values").get("Workspace").get("value").toNumber();
	values_map = Map();
	values_map.put("userid",user.get("id"));
	values_map.put("sheetname",SheetName);
	values_map.put("sheetid",SheetId);
	response_map = zoho.cliq.createRecord("defaultiddb",values_map);
	/*if(response_map.get("status")=="SUCCESS")
	{
		response.put("text","Your configuration is successful :Cool:");
	}
	else 
	{
		response.put("text","Searching for the error :Search: Please comeback and try again");
	}
	return response;
	*/
	response = Map();
	sections = list();
	response_map = zoho.cliq.getRecords("defaultiddb");
	l = Map();
	response1 = invokeurl
	[
		url :"https://api.smartsheet.com/2.0/sheets/" + SheetId
		type :GET
		connection:"test1"
	];
	Column = Collection();
	for each  column in response1.get("columns")
	{
		columnid = column.get("id");
		columname = column.get("title");
		Column.add({"label":columname,"value":columnid});
	}
	/*l.put("text",Column);
	return l;
	*/
	form = {"name":"Widget Setting","type":"form","title":"Setting Up Ur Widget","button_label":"Submit","inputs":{{"type":"dynamic_select","name":"TaskName","label":"Task Name Equivalent","hint":"Select Taskname Equivalent","placeholder":"Select","mandatory":true,"options":Column},{"type":"dynamic_select","name":"DueDate","label":"Due Date Equivalent","hint":"Select Due Date Equivalent","placeholder":"Select","mandatory":true,"options":Column},{"type":"dynamic_select","name":"Assignee","label":"Assignee Equivalent","hint":"Select Assignee Equivalent","placeholder":"Select","mandatory":true,"options":Column},{"type":"dynamic_select","name":"Notes","label":"Notes Equivalent","hint":"Select the Notes Equivalent","placeholder":"Select","mandatory":false,"options":Column},{"type":"dynamic_select","name":"Status","label":"Select the Status Equivalent","hint":"Select the Status Equivalent","placeholder":"Select","mandatory":false,"options":Column},{"type":"dynamic_select","max_selections":"3","name":"Additional","label":"Additional Fields","hint":"Select additional fields - max 3","placeholder":"Select","mandatory":false,"multiple":true,"options":Column}},"action":{"type":"invoke.function","name":"FormFunctions"}};
	return form;
}
// Gets the sheet id from the form and gets the equivalent names from the users and  stores it do the Data Base
else if(name == "Widget Setting")
{
	info form;
	response = Map();
	c = Map();
	values = form.get("values");
	c.put("duedate",values.get("DueDate").get("label"));
	c.put("duedateid",values.get("DueDate").get("value"));
	c.put("task",values.get("TaskName").get("label"));
	c.put("taskid",values.get("TaskName").get("value"));
	c.put("assignee",values.get("Assignee").get("label"));
	c.put("assigneeid",values.get("Assignee").get("value"));
	c.put("field","Widget");
	c.put("userid",user.get("id"));
	info values.get("Status").get("label").isNull();
	if(!values.get("Status").get("label").isNull())
	{
		c.put("status",values.get("Status").get("label"));
		c.put("statusid",values.get("Status").get("value"));
	}
	info c;
	//response.put("text",c);
	response_map = zoho.cliq.createRecord("equivalentcolumns",c);
	info response_map;
	d = Map();
	d.put("field","Widget");
	d.put("userid",user.get("id"));
	if(!values.get("Notes").get("label").isNull())
	{
		d.put("notes",values.get("Notes").get("label"));
		d.put("notesid",values.get("Notes").get("value"));
	}
	val = form.get("values");
	num = {"1":"one","2":"two","3":"three"};
	n = 1;
	for each  element in val.get("Additional")
	{
		if(element.isNull())
		{
			continue;
		}
		else
		{
			d.put("add" + num.get(n.toString()),element.get("label"));
			d.put("add" + num.get(n.toString()) + "id",element.get("value"));
		}
		n = n + 1;
	}
	info d;
	response_map3 = zoho.cliq.createRecord("additionalfields",d);
	if(response_map.get("status") == "SUCCESS" && response_map3.get("status") == "SUCCESS")
	{
		response.put("text","Your configuration is successful :Cool:");
	}
	else
	{
		response.put("text","Searching for the error :Search: Please comeback and try again");
	}
	/*if(response_map2.get("status") == "SUCCESS" && response_map2.get("list").size() > 0 && response_map2.get("list").get(0).get("userid") == user.get("id"))
	{
		record_id = 0;
		webhooks = response_map2.get("list").get(0).get("webhookid");
		channeluniquename = response_map2.get("list").get(0).get("uniquename");
		sheetname = response_map2.get("list").get(0).get("sheetname");
		info webhooks;
		header_data = Map();
		header_data.put("Content-Type","application/json");
		parm = Map();
		parm.put("enabled",false);
		response1 = invokeurl
		[
			url :"https://api.smartsheet.com/2.0/webhooks/" + webhooks
			type :PUT
			parameters:parm.toString()
			headers:header_data
			connection:"test1"
		];
		info response1;
		if(response1.get("message") == "SUCCESS")
		{
			response2 = invokeurl
			[
				url :"https://api.smartsheet.com/2.0/webhooks/" + webhooks
				type :DELETE
				connection:"test1"
			];
			info response2;
		}
		record_id = zoho.cliq.getRecords("notifications").get("list").get(0).get("id");
		if(record_id.length() > 0)
		{
			c = zoho.cliq.deleteRecord("notifications",record_id);
		}
		info c;
		if(c.get("status") == "success")
		{
			response.put("text","Your configuration is successful and Unmapping of previous channel is successful. Map the channel again to get notifications");
			zoho.cliq.postToChannel(channeluniquename,{"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"text":"This Channel is Unmapped from *Smart Sheet's* " + sheetname + " by " + user.get("first_name")});
		}
	}*/
	return response;
}
// --------------->  NOTIFICATION MENU HANDLER OF THE BOT 
// Channel Mapping 
/*else if(name == "Channel Mapping")
{
	c = Map();
	values = Map();
	info form;
	channeldetails = form.get("values").get("channels");
	info channeldetails;
	query_mape = Map();
	criteria_stringe = "userid==" + user.get("id");
	query_mape.put("criteria",criteria_stringe);
	response_mape = zoho.cliq.getRecords("defaultiddb",query_mape);
	record_ide = 0;
	if(response_mape.get("status").equalsIgnoreCase("SUCCESS") && response_mape.get("list").size() > 0)
	{
		record_ide = response_mape.get("list").get(0).get("id");
	}
	sheetdetails = zoho.cliq.getRecordById("defaultiddb",record_ide);
	info sheetdetails;
	values.put("sheetname",sheetdetails.get("object").get("sheetname"));
	values.put("sheetid",sheetdetails.get("object").get("sheetid"));
	values.put("uniquename",channeldetails.get("unique_name"));
	values.put("channelname",channeldetails.get("name"));
	values.put("channelid",channeldetails.get("id"));
	query_map = Map();
	criteria_string = "userid==" + user.get("id");
	query_map.put("criteria",criteria_string);
	response_map = zoho.cliq.getRecords("weebhookkey",query_map).get("list").get(0);
	info response_map;
	//------->Sandbox
	//callbackurl = "https://cliq.zoho.com/api/v2/applications/2305843009213698245/incoming?appkey=sbx-NDI5NC03ZTE4MmVmYi0zZTRhLTQyZmYtOTViZC05MmE4NDUzZDU2OGM=&zapikey=" + response_map.get("zapikey").trim();
	//-------->Extention
	callbackurl = "https://cliq.zoho.com/api/v2/applications/4294/incoming?appkey=NDI5NC03ZTE4MmVmYi0zZTRhLTQyZmYtOTViZC05MmE4NDUzZDU2OGM=&zapikey=" + response_map.get("zapikey").trim();
	info callbackurl;
	sheet = sheetdetails.get("object").get("sheetid");
	info sheet;
	query_mapt = Map();
	criteria_stringt = "userid==" + user.get("id");
	query_mapt.put("criteria",criteria_stringt);
	responset = zoho.cliq.getRecords("equivalentcolumns",query_mapt);
	record_idt = 0;
	if(responset.get("status").equalsIgnoreCase("SUCCESS") && responset.get("list").size() > 0)
	{
		record_idt = responset.get("list").get(0).get("id");
	}
	response_mapt = zoho.cliq.getRecordById("equivalentcolumns",record_idt);
	taskid = response_mapt.get("object").get("taskid");
	duedate = response_mapt.get("object").get("duedateid");
	status = response_mapt.get("object").get("statusid");
	assignee = response_mapt.get("object").get("assigneeid");
	query_mapw = Map();
	criteria_stringw = "userid==" + user.get("id");
	query_mapw.put("criteria",criteria_stringw);
	response_mapw = zoho.cliq.getRecords("additionalfields",query_mapw);
	record_idw = 0;
	if(response_mapw.get("status").equalsIgnoreCase("SUCCESS") && response_mapw.get("list").size() > 0)
	{
		record_idw = response_mapw.get("list").get(0).get("id");
	}
	responsen = zoho.cliq.getRecordById("additionalfields",record_idw);
	info responsen;
	notes = responsen.get("object").get("notesid");
	info notes;
	l = List();
	if(taskid != 0)
	{
		l.add(taskid);
	}
	if(duedate != 0)
	{
		l.add(duedate);
	}
	if(status != 0)
	{
		l.add(status);
	}
	if(assignee != 0)
	{
		l.add(assignee);
	}
	if(notes != 0)
	{
		l.add(notes);
	}
	info l;
	//{   "name": "Webhook #4", "callbackUrl": "https://www.myApp.com/webhooks", "scope": "sheet", "scopeObjectId": 3285357287499652, "events": ["*.*"], "version": 1, "subscope": {"columnIds": [7318427511613316, 7318427511613123]}}
	//{"scopeObjectId":"860768599074692","scope":"sheet","name":"webhook","callbackUrl":"https://cliq.zoho.com/api/v2/bots/smartsheetz/incoming?zapi=1001.ef1cfe5161af7c0301ee2ca1039e55f6.84c43f1fcafbd0740cae2b081f06b49f","subscope":{"columnIds":["3722317981345668","5411167841609604","7662967655294852","8225917608716164","2033468121081732"]},"version":1,"events":["*.*"]}
	columnidforwebhooks = Map();
	columnidforwebhooks.put("columnIds",l);
	info columnidforwebhooks;
	webhookmap = Map();
	webhookmap.put("name","webhook");
	webhookmap.put("callbackUrl",callbackurl);
	webhookmap.put("scope","sheet");
	webhookmap.put("scopeObjectId",sheet);
	webhookmap.put("events",{"*.*"});
	webhookmap.put("version",1);
	webhookmap.put("subscope",columnidforwebhooks);
	info webhookmap;
	//c.put("text",webhookmap);
	header_data = Map();
	header_data.put("Content-Type","application/json");
	response = invokeurl
	[
		url :" https://api.smartsheet.com/2.0/webhooks"
		type :POST
		parameters:webhookmap.toString()
		headers:header_data
		connection:"test1"
	];
	webhookid = response.get("result").get("id");
	info webhookid;
	eventtrue = Map();
	eventtrue.put("enabled",true);
	response1 = invokeurl
	[
		url :" https://api.smartsheet.com/2.0/webhooks/" + webhookid
		type :PUT
		parameters:eventtrue.toString()
		headers:header_data
		connection:"test1"
	];
	info response1;
	webhookstatus = response1.get("result").get("status");
	info webhookstatus;
	if(webhookstatus == "ENABLED")
	{
		values.put("enabled","TRUE");
	}
	//c.put("text",response1);
	//return c;
	values.put("webhookid",webhookid);
	values.put("userid",user.get("id"));
	values.put("user",user.get("first_name"));
	response_map = zoho.cliq.createRecord("notifications",values);
	info response_map;
	if(response_map.get("status") == "SUCCESS")
	{
		c.put("text","Your Sheet is sucessfully mapped to the " + channeldetails.get("name") + " :wink:");
		zoho.cliq.postToChannel(channeldetails.get("unique_name"),{"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"text":"This Channel is Mapped with *SmartSheet's* " + sheetdetails.get("object").get("sheetname") + " by " + user.get("first_name") + " You will get notification regarding the sheets here :wink:"});
	}
	else
	{
		c.put("text","Oops there a techinal error please comeback and try again");
	}
	return c;
}*/
// Edited Channel to Data Base 
else if(name == "EdtitedChanneltoDataBase")
{
	info form;
	response = Map();
	webhookid = form.get("values").get("Weebhookid").toNumber();
	//response.put("text",form.get("values").get("channels"));
	uniquename = form.get("values").get("channels").get("unique_name");
	name = form.get("values").get("channels").get("name");
	values_map = Map();
	values_map.put("uniquename",uniquename);
	values_map.put("channelname",name);
	values_map.put("userid",user.get("id"));
	values_map.put("user",user.get("first_name"));
	query_mapn = Map();
	criteria_stringn = "webhookid==" + webhookid;
	query_mapn.put("criteria",criteria_stringn);
	response_mapn = zoho.cliq.getRecords("notifications",query_mapn);
	if(response_map.get("status").equalsIgnoreCase("SUCCESS") && response_map.get("list").size() > 0)
	{
		record_id = response_map.get("list").get(0).get("id");
		info record_id;
	}
	if(record_id.length() > 0)
	{
		response_map = zoho.cliq.updateRecord("notifications",record_id,values_map);
	}
	if(response_map.get("status") == "SUCCESS")
	{
		response.put("text","Channel is successfully Remapped");
		zoho.cliq.postToChannel(uniquename,{"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"text":"This Channel is Mapped with *SmartSheet's* " + response_mapn.get("list").get(0).get("sheetname") + " by " + user.get("first_name") + " You will get notification regarding the sheets here :wink:"});
	}
	else
	{
		response.put("text","There is an error in configurations");
	}
	/*channel = response_map.get("list").get(0).get("uniquename");
	info uniquename;
	info channel;
	if(name == channel)
	{
		r = Map();
		r.put("text",name + " is currently mapped. Please try selecting another channel");
		return r;
	}
	record_id = response_map.get("list").get(0).get("id");
	zoho.cliq.postToChannel(channel,{"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"text":"This Channel is Unmapped from *SmartSheet's* " + response_map.get("list").get(0).get("sheetname") + " by " + user.get("first_name")});
	info response_map;
	if(response_map.get("status").equalsIgnoreCase("SUCCESS") && response_map.get("list").size() > 0)
	{
		record_id = response_map.get("list").get(0).get("id");
		info record_id;
	}
	sheetdetails = zoho.cliq.getRecordById("notifications",record_id);
	if(record_id.length() > 0)
	{
		response_map = zoho.cliq.updateRecord("notifications",record_id,values_map);
	}
	info response_map;
	if(response_map.get("status") == "SUCCESS")
	{
		response.put("text","Channel is successfully Remapped");
		zoho.cliq.postToChannel(uniquename,{"bot":{"name":"SmartSheet","image":"https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg"},"text":"This Channel is Mapped with *SmartSheet's* " + sheetdetails.get("object").get("sheetname") + " by " + user.get("first_name") + " You will get notification regarding the sheets here :wink:"});
	}
	else 
	{
		response.put("text","There is an error in configurations");
	}*/
	return response;
}
// --------------->  CREATE TASK MENU ACTION OF THE BOT AND MESSAGE ACTIONS
else if(name == "CreateTask")
{
	response = Map();
	query_mape = Map();
	criteria_stringe = "userid==" + user.get("id");
	query_mape.put("criteria",criteria_stringe);
	response_mape = zoho.cliq.getRecords("defaultiddb",query_mape);
	record_ide = 0;
	if(response_mape.get("status").equalsIgnoreCase("SUCCESS") && response_mape.get("list").size() > 0)
	{
		record_ide = response_mape.get("list").get(0).get("id");
	}
	response_mape = zoho.cliq.getRecordById("defaultiddb",record_ide);
	sheetid = response_mape.get("object").get("sheetid");
	info sheetid;
	query_mapt = Map();
	criteria_stringt = "userid==" + user.get("id") + "&& field==Widget";
	query_mapt.put("criteria",criteria_stringt);
	response_mapt = zoho.cliq.getRecords("equivalentcolumns",query_mapt);
	record_idt = 0;
	if(response_mapt.get("status").equalsIgnoreCase("SUCCESS") && response_mapt.get("list").size() > 0)
	{
		record_idt = response_mapt.get("list").get(0).get("id");
	}
	response_mapt = zoho.cliq.getRecordById("equivalentcolumns",record_idt);
	info response_mapt;
	query_mapw = Map();
	criteria_stringw = "userid==" + user.get("id") + "&& field==Widget";
	query_mapw.put("criteria",criteria_stringw);
	response_mapw = zoho.cliq.getRecords("additionalfields",query_mapw);
	record_idw = 0;
	if(response_mapw.get("status").equalsIgnoreCase("SUCCESS") && response_mapw.get("list").size() > 0)
	{
		record_idw = response_mapw.get("list").get(0).get("id");
	}
	response_mapw = zoho.cliq.getRecordById("additionalfields",record_idw);
	info response_mapw;
	cellValues = List();
	Formvalues = form.get("values");
	if(!Formvalues.get("date").isNull())
	{
		cellValues.add({"columnId":response_mapt.get("object").get("duedateid"),"value":Formvalues.get("date")});
		info response_mapt.get("object").get("duedateid");
	}
	if(!Formvalues.get("note").isNull())
	{
		cellValues.add({"columnId":response_mapw.get("object").get("notesid"),"value":Formvalues.get("note")});
		info response_mapw.get("object").get("notesid");
	}
	cellValues.add({"columnId":response_mapt.get("object").get("taskid"),"value":Formvalues.get("Task")});
	if(!Formvalues.get("member").isNull())
	{
		cellValues.add({"columnId":response_mapt.get("object").get("assigneeid"),"value":Formvalues.get("member").get("email"),"displayValue":Formvalues.get("member").get("first_name")});
	}
	if(!Formvalues.get("Sheet").isNull())
	{
		cellValues.add({"columnId":response_mapt.get("object").get("statusid"),"value":Formvalues.get("Sheet").get("label")});
	}
	info cellValues;
	cellmap = Map();
	cellmap.put("cells",cellValues);
	cellmap.put("toTop",true);
	//response.put("text",cellmap);
	par = cellmap;
	header_data = Map();
	header_data.put("Content-Type","application/json");
	info par;
	response1 = invokeurl
	[
		url :"https://api.smartsheet.com/2.0/sheets/" + sheetid + "/rows"
		type :POST
		parameters:par.toString()
		headers:header_data
		connection:"test1"
	];
	info response1;
	if(response1.get("message") == "SUCCESS")
	{
		response.put("text","Your Task is been added successfully");
	}
	else if(response1.get("errorCode") == "1080")
	{
		cellValues.clear();
		if(!Formvalues.get("note").isNull())
		{
			cellValues.add({"columnId":response_mapw.get("object").get("notesid"),"value":Formvalues.get("note")});
			info response_mapw.get("object").get("notesid");
		}
		cellValues.add({"columnId":response_mapt.get("object").get("taskid"),"value":Formvalues.get("Task")});
		if(!Formvalues.get("member").get("email").isNull())
		{
			cellValues.add({"columnId":response_mapt.get("object").get("assigneeid"),"value":Formvalues.get("member").get("email"),"displayValue":Formvalues.get("member").get("first_name")});
		}
		if(!Formvalues.get("Sheet").isNull())
		{
			cellValues.add({"columnId":response_mapt.get("object").get("statusid"),"value":Formvalues.get("Sheet").get("label")});
		}
		info cellValues;
		cellmap = Map();
		cellmap.put("cells",cellValues);
		cellmap.put("toTop",true);
		//response.put("text",cellmap);
		par = cellmap;
		header_data = Map();
		header_data.put("Content-Type","application/json");
		info par;
		response2 = invokeurl
		[
			url :"https://api.smartsheet.com/2.0/sheets/" + sheetid + "/rows"
			type :POST
			parameters:par.toString()
			headers:header_data
			connection:"test1"
		];
		info response2;
		if(response2.get("message") == "SUCCESS")
		{
			response.put("text","Your Task is been added successfully and due to the Date Dependency, Date is not added to the sheet");
		}
		else
		{
			response.put("text","Opps there is a error in adding the task please come and try again");
		}
	}
	return response;
}
// -------------------------------> WIDGET ADD TASK
else if(name == "Widget CreateTask")
{
	response = Map();
	query_mape = Map();
	criteria_stringe = "userid==" + user.get("id");
	query_mape.put("criteria",criteria_stringe);
	response_mape = zoho.cliq.getRecords("defaultiddb",query_mape);
	record_ide = 0;
	if(response_mape.get("status").equalsIgnoreCase("SUCCESS") && response_mape.get("list").size() > 0)
	{
		record_ide = response_mape.get("list").get(0).get("id");
	}
	response_mape = zoho.cliq.getRecordById("defaultiddb",record_ide);
	sheetid = response_mape.get("object").get("sheetid");
	info sheetid;
	query_mapt = Map();
	criteria_stringt = "userid==" + user.get("id") + "&& field==Widget";
	query_mapt.put("criteria",criteria_stringt);
	response_mapt = zoho.cliq.getRecords("equivalentcolumns",query_mapt);
	record_idt = 0;
	if(response_mapt.get("status").equalsIgnoreCase("SUCCESS") && response_mapt.get("list").size() > 0)
	{
		record_idt = response_mapt.get("list").get(0).get("id");
	}
	response_mapt = zoho.cliq.getRecordById("equivalentcolumns",record_idt);
	info response_mapt;
	query_mapw = Map();
	criteria_stringw = "userid==" + user.get("id") + "&& field==Widget";
	query_mapw.put("criteria",criteria_stringw);
	response_mapw = zoho.cliq.getRecords("additionalfields",query_mapw);
	record_idw = 0;
	if(response_mapw.get("status").equalsIgnoreCase("SUCCESS") && response_mapw.get("list").size() > 0)
	{
		record_idw = response_mapw.get("list").get(0).get("id");
	}
	response_mapw = zoho.cliq.getRecordById("additionalfields",record_idw);
	info response_mapw;
	cellValues = List();
	Formvalues = form.get("values");
	if(!Formvalues.get("date").isNull())
	{
		cellValues.add({"columnId":response_mapt.get("object").get("duedateid"),"value":Formvalues.get("date")});
		info response_mapt.get("object").get("duedateid");
	}
	if(!Formvalues.get("note").isNull())
	{
		cellValues.add({"columnId":response_mapw.get("object").get("notesid"),"value":Formvalues.get("note")});
		info response_mapw.get("object").get("notesid");
	}
	cellValues.add({"columnId":response_mapt.get("object").get("taskid"),"value":Formvalues.get("Task")});
	if(!Formvalues.get("member").isNull())
	{
		cellValues.add({"columnId":response_mapt.get("object").get("assigneeid"),"value":Formvalues.get("member").get("email"),"displayValue":Formvalues.get("member").get("first_name") + " " + Formvalues.get("member").get("last_name")});
	}
	if(!Formvalues.get("Sheet").isNull())
	{
		cellValues.add({"columnId":response_mapt.get("object").get("statusid"),"value":Formvalues.get("Sheet").get("label")});
	}
	info cellValues;
	cellmap = Map();
	cellmap.put("cells",cellValues);
	cellmap.put("toTop",true);
	//response.put("text",cellmap);
	par = cellmap;
	header_data = Map();
	header_data.put("Content-Type","application/json");
	info par;
	response1 = invokeurl
	[
		url :"https://api.smartsheet.com/2.0/sheets/" + sheetid + "/rows"
		type :POST
		parameters:par.toString()
		headers:header_data
		connection:"test1"
	];
	info response1;
	if(response1.get("message") == "SUCCESS")
	{
		banner = {"text":"Your Task is been added successfull","status":"success","type":"banner"};
		return banner;
	}
	else if(response1.get("errorCode") == "1080")
	{
		cellValues.clear();
		if(!Formvalues.get("note").isNull())
		{
			cellValues.add({"columnId":response_mapw.get("object").get("notesid"),"value":Formvalues.get("note")});
			info response_mapw.get("object").get("notesid");
		}
		cellValues.add({"columnId":response_mapt.get("object").get("taskid"),"value":Formvalues.get("Task")});
		if(!Formvalues.get("member").get("email").isNull())
		{
			cellValues.add({"columnId":response_mapt.get("object").get("assigneeid"),"value":Formvalues.get("member").get("email"),"displayValue":Formvalues.get("member").get("first_name") + " " + Formvalues.get("member").get("last_name")});
		}
		if(!Formvalues.get("Sheet").isNull())
		{
			cellValues.add({"columnId":response_mapt.get("object").get("statusid"),"value":Formvalues.get("Sheet").get("label")});
		}
		info cellValues;
		cellmap = Map();
		cellmap.put("cells",cellValues);
		cellmap.put("toTop",true);
		//response.put("text",cellmap);
		par = cellmap;
		header_data = Map();
		header_data.put("Content-Type","application/json");
		info par;
		response2 = invokeurl
		[
			url :"https://api.smartsheet.com/2.0/sheets/" + sheetid + "/rows"
			type :POST
			parameters:par.toString()
			headers:header_data
			connection:"test1"
		];
		info response2;
		if(response2.get("message") == "SUCCESS")
		{
			banner = {"text":"Your Task is been added successfully and due to the Date Dependency, Date is not added to the sheet","status":"success","type":"banner"};
			return banner;
		}
		else
		{
			banner = {"text":"Oops Error Occured","status":"failure","type":"banner"};
			return banner;
		}
	}
	return response;
}
else if(name == "Notification-subtask-map")
{
	r = Map();
	form_name = form.get("values").toString();
	response = Map();
	info form;
	SheetId = form.get("values").get("Sheet").get("value").toNumber();
	Channelid = form.get("values").get("channels").get("unique_name");
	Channelname = form.get("values").get("channels").get("name");
	Sheetname = form.get("values").get("Sheet").get("label");
	formname = SheetId + "_" + Channelid + "_" + Channelname + "_" + Sheetname;
	response1 = invokeurl
	[
		url :"https://api.smartsheet.com/2.0/sheets/" + SheetId
		type :GET
		connection:"test1"
	];
	Column = Collection();
	for each  column in response1.get("columns")
	{
		columnid = column.get("id");
		columname = column.get("title");
		Column.add({"label":columname,"value":columnid});
	}
	info Column;
	info formname;
	form = {"name":"formname","type":"form","title":"Setting Up Ur Notifications","button_label":"Submit","inputs":{{"type":"hidden","name":"ChannelDetails","value":formname},{"type":"dynamic_select","name":"TaskName","label":"Task Name Equivalent","hint":"Select Taskname Equivalent","placeholder":"Select","mandatory":true,"options":Column},{"type":"dynamic_select","name":"DueDate","label":"Due Date Equivalent","hint":"Select Due Date Equivalent","placeholder":"Select","mandatory":true,"options":Column},{"type":"dynamic_select","name":"Assignee","label":"Assignee Equivalent","hint":"Select Assignee Equivalent","placeholder":"Select","mandatory":true,"options":Column},{"type":"dynamic_select","name":"Notes","label":"Notes Equivalent","hint":"Select the Notes Equivalent","placeholder":"Select","mandatory":false,"options":Column},{"type":"dynamic_select","name":"Status","label":"Select the Status Equivalent","hint":"Select the Status Equivalent","placeholder":"Select","mandatory":false,"options":Column},{"type":"dynamic_select","max_selections":"3","name":"Additional","label":"Additional Fields","hint":"Select additional fields - max 3","placeholder":"Select","mandatory":false,"multiple":true,"options":Column}},"action":{"type":"invoke.function","name":"Notificationsmapsheetone"}};
	return form;
}
return r;
]]></script>
</executor>
</executors>
</function>
<function>
<name>WidgetFunctions</name>
<id>4878936000000106125</id>
<description><![CDATA[It does all the widget functions]]></description>
<type>2010</type>
<executors>
<executor>
<handlertype>2010</handlertype>
<type>0</type>
<script><![CDATA[r = Map();
label = target.get("label");
id = target.get("id");
// Widget Add Task 
if(label == "Add Task")
{
	response = Map();
	info target;
	query_mapt = Map();
	criteria_stringt = "userid==" + user.get("id") + "&& field==Widget";
	query_mapt.put("criteria",criteria_stringt);
	response_map = zoho.cliq.getRecords("equivalentcolumns",query_mapt).get("list").get(0);
	info response_map;
	Taskequivalent = response_map.get("task");
	Duedateequivalent = response_map.get("duedate");
	Assigneeequivalent = response_map.get("assignee");
	Notesequivalent = response_map.get("notes");
	form = {"name":"AddTask","type":"form","title":"Add Task","button_label":"Add Task","inputs":{{"name":"Task","label":Taskequivalent,"placeholder":"Type the " + Taskequivalent + " name","min_length":"0","max_length":"25","mandatory":true,"type":"text"},{"name":"email","label":Assigneeequivalent,"placeholder":"Enter the " + Assigneeequivalent + " e-mail","min_length":"0","max_length":"25","mandatory":true,"type":"text","format":"email"},{"name":"date","label":Duedateequivalent,"placeholder":"Select the date","mandatory":false,"type":"date"},{"name":"notes","label":Notesequivalent,"placeholder":"Enter the Notes","min_length":"0","max_length":"70","mandatory":false,"type":"text"}},"action":{"type":"invoke.function","name":"FormFunctions"}};
	return form;
}
else if(label == "Notes")
{
	info target;
	response = Map();
	//response.put("text",target);
	l = Map();
	taskvalue = "";
	duedatevalue = "";
	assigneevalue = "";
	c = "";
	response_map = zoho.cliq.getRecords("defaultiddb").get("list").get(0).get("sheetid");
	response_map1 = zoho.cliq.getRecords("equivalentcolumns");
	notesid = response_map1.get("list").get(0).get("notesid");
	taskid = response_map1.get("list").get(0).get("taskid");
	duedateid = response_map1.get("list").get(0).get("duedateid");
	assigneeid = response_map1.get("list").get(0).get("assigneeid");
	Duedate = response_map1.get("list").get(0).get("duedate");
	AssigneeName = response_map1.get("list").get(0).get("assignee");
	TaskName = response_map1.get("list").get(0).get("task");
	response1 = invokeurl
	[
		url :"https://api.smartsheet.com/2.0/sheets/" + response_map
		type :GET
		connection:"test1"
	];
	//info response1.toMap();
	for each  element in response1.get("rows")
	{
		if(element.get("id") == target.get("id"))
		{
			for each  ele in element.get("cells")
			{
				if(ele.get("columnId") == taskid)
				{
					taskvalue = ele.get("value");
				}
				if(ele.get("columnId") == duedateid)
				{
					//info ele.get("value");
					if(ele.get("value") == NULL)
					{
						duedatevalue = "-";
					}
					else
					{
						date = ele.get("value");
						date1 = date.toDate();
						duedatevalue = toString(toDate(date1,"yyyy-MM-dd"),"dd/MM/yyyy");
					}
				}
				if(ele.get("columnId") == assigneeid)
				{
					//info ele.get("value");
					if(ele.get("value") == NULL)
					{
						assigneevalue = "Not Assigned";
					}
					else
					{
						assigneevalue = ele.get("displayValue");
					}
				}
				if(ele.get("columnId") == notesid)
				{
					//info ele.get("value");
					if(ele.get("value") == NULL)
					{
						c = "Add notes";
					}
					else
					{
						c = ele.get("value");
						//info c;
					}
				}
			}
		}
	}
	elements = list();
	sections = Map();
	elements.add({"type":"text","text":TaskName + ": " + taskvalue});
	elements.add({"type":"text","text":Duedate + ": " + duedatevalue});
	elements.add({"type":"text","text":AssigneeName + ": " + assigneevalue});
	elements.add({"type":"subtext","text":c});
	elements.add({"type":"buttons","buttons":{{"label":"Add Notes","type":"invoke.function","name":"addingnotes","id":target.get("id")},{"label":"Mark as Completed","type":"invoke.function","name":"statuscompleted","id":target.get("id")},{"label":"Comments","type":"invoke.function","name":"rowcomments","id":target.get("id")}}});
	elements.add({"type":"divider"});
	/*sections.put({"id":1,"elements":elements});
	info sections;
	return sections;*/
	l.put("type","section");
	l.put("elements",elements);
	info l;
	return l;
	//return response;
}
return r;
]]></script>
</executor>
</executors>
</function>
<function>
<name>Reconfiguration</name>
<id>4878936000000106123</id>
<description><![CDATA[Reconfigures the default sheet and workspace]]></description>
<type>2000</type>
<executors>
<executor>
<handlertype>2000</handlertype>
<type>0</type>
<script><![CDATA[response = Map();
query_map = Map();
criteria_string = "userid==" + user.get("id");
query_map.put("criteria",criteria_string);
response_map = zoho.cliq.getRecords("defaultiddb",query_map);
// Set values for other fields if required 
response1 = invokeurl
[
	url :"https://api.smartsheet.com/2.0/sheets"
	type :GET
	connection:"test1"
];
sheetids = Collection();
groups = response.toMap();
groups1 = response1.toMap();
for each  group in groups1.get("data")
{
	if(!isNumber(group))
	{
		sidnumber = group.get("id");
		sheetname = group.get("name").toString();
		sheetids.add({"label":sheetname,"value":sidnumber});
	}
}
form = {"name":"Workspace","type":"form","title":"Configurations","hint":"","button_label":"Next","inputs":{{"type":"dynamic_select","name":"Sheet","label":"Sheets","hint":"Select your default Sheet","placeholder":"1.Task Sheet","mandatory":true,"value":"sid","options":sheetids}},"action":{"type":"invoke.function","name":"FormFunctions"}};
info form;
return form;
]]></script>
</executor>
</executors>
</function>
<function>
<name>Welcomehandler</name>
<id>4878936000000106121</id>
<description><![CDATA[Give a prompt to the user in welcome handler]]></description>
<type>2000</type>
<executors>
<executor>
<handlertype>2000</handlertype>
<type>0</type>
<script><![CDATA[response = Map();
response.put("text"," Click on *Configure* Menu action to connect your Cliq with Smart Sheet and *Notification* Menu action to get notified about Smart Sheet");
bot = Map();
bot.put("name","SmartSheet");
bot.put("image","https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg");
response.put("bot",bot);
card = Map();
card.put("title","Configurations & Notifications");
card.put("thumbnail","https://www.clipartkey.com/mpngs/m/51-510571_blue-checklist-icon-png.png");
card.put("theme","modern-inline");
response.put("card",card);
return response;
]]></script>
</executor>
</executors>
</function>
</functions>
<schedulers>
<scheduler>
<name>Weekly Report User</name>
<description><![CDATA[Gives a detailed report of the user]]></description>
<executors>
<executor>
<handlertype>5000</handlertype>
<type>0</type>
<script><![CDATA[r = Map();
useremail = invokeurl
[
	url :"https://api.smartsheet.com/2.0/users/me"
	type :GET
	connection:"test1"
];
emailid = useremail.get("email");
info emailid;
query_mapt = Map();
criteria_stringt = "userid==" + user.get("id") + " && field==Widget";
query_mapt.put("criteria",criteria_stringt);
response_mapt = zoho.cliq.getRecords("equivalentcolumns",query_mapt);
response_mapn = zoho.cliq.getRecords("notifications");
if(response_mapn.get("status").equalsIgnoreCase("SUCCESS") && response_mapn.get("list").size() > 0)
{
	for each  element in response_mapn.get("list")
	{
		//info response_mapt.get("list").get(0);
		response = Map();
		bot = Map();
		bot.put("name","SmartSheet");
		bot.put("image","https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg");
		response.put("bot",bot);
		slidesList = list();
		slidesList0 = Map();
		slidesList0.put("type","list");
		dataList = list();
		channelname = element.get("uniquename");
		sheetname = element.get("sheetname");
		//info sheetname;
		sheetid = element.get("sheetid");
		//info sheetid;
		query_mapt = Map();
		//892069314094980_ Webhooks
		//info response_mapt;
		//info response_mapt.get("list").get(0);
		r = Map();
		sections = list();
		username = list();
		// --------->Gets the data from Default Id DB
		//info defaultids;
		// ---------->Gets the data from Equivalent
		fieldval1 = sheetid + "_ Webhooks";
		query_mapt = Map();
		criteria_stringt = "userid==" + user.get("id") + " && field==" + fieldval1;
		query_mapt.put("criteria",criteria_stringt);
		EquivalentColumns = zoho.cliq.getRecords("equivalentcolumns",query_mapt).get("list").get(0);
		//info EquivalentColumns;
		taskid = EquivalentColumns.get("taskid");
		taskname = EquivalentColumns.get("task");
		assigneeid = EquivalentColumns.get("assigneeid");
		statusname = EquivalentColumns.get("status");
		statusid = EquivalentColumns.get("statusid");
		// -------------> Gets the data from Additional Columns
		query_mapw = Map();
		criteria_stringw = "userid==" + user.get("id") + " && field==" + fieldval1;
		query_mapw.put("criteria",criteria_stringw);
		AdditionalColumns = zoho.cliq.getRecords("additionalfields",query_mapw).get("list").get(0);
		notesname = AdditionalColumns.get("notes");
		notesid = AdditionalColumns.get("notesid");
		addval = List();
		if(AdditionalColumns.get("addone") != "NULL")
		{
			addval.add(AdditionalColumns.get("addone"));
		}
		if(AdditionalColumns.get("addtwo") != "NULL")
		{
			addval.add(AdditionalColumns.get("addtwo"));
		}
		if(AdditionalColumns.get("addthree") != "NULL")
		{
			addval.add(AdditionalColumns.get("addthree"));
		}
		//info addval;
		l = Map();
		response1 = invokeurl
		[
			url :"https://api.smartsheet.com/2.0/sheets/" + sheetid
			type :GET
			connection:"test1"
		];
		rowmap = Map();
		for each  element in response1.get("rows")
		{
			rowid = element.get("id");
			for each  ele in element.get("cells")
			{
				//info ele;
				if(ele.get("columnId") == taskid && !isNull(ele.get("value")))
				{
					taskequivalentname = ele.get("value");
					rowmap.put(taskequivalentname,rowid);
				}
			}
		}
		//info rowmap;
		Column = Map();
		ColumnName = Map();
		ColumnId = Map();
		//To make permalink in the view button of the widget
		for each  column in response1.get("columns")
		{
			columnid = column.get("id");
			columname = column.get("title");
			ColumnName.put(columname,columnid);
			//To get the id of the column using the name
			ColumnId.put(columnid,columname);
			//To get the name of the column using the column id
		}
		Column = {"getbyName":ColumnName,"getbyID":ColumnId};
		//info Column;
		Rowmap = Map();
		rowid = 1;
		list = List();
		WidgetColumnID = Column.get("getbyID");
		//info WidgetColumnID;
		TaskID = EquivalentColumns.get("taskid");
		Duedate = EquivalentColumns.get("duedate");
		AssigneeName = EquivalentColumns.get("assignee");
		TaskName = EquivalentColumns.get("task");
		//info user.get("email");
		list.add(TaskName);
		list.add(Duedate);
		list.add(AssigneeName);
		//info list;
		count = 0;
		for each  row in response1.get("rows")
		{
			//info row;
			Row2 = Map();
			for each  cell in row.get("cells")
			{
				Row1 = Map();
				if(cell.get("columnId") == assigneeid)
				{
					colid = cell.get("columnId").toNumber();
					if(cell.get("value") == emailid)
					{
						//info user.get("email");
						count = count + 1;
						username.add(cell.get("displayValue"));
					}
					colval = cell.get("displayValue").toString();
					colname = Column.toMap().get("getbyID").get(colid).toString();
				}
				else
				{
					colid = cell.get("columnId").toNumber();
					colval = cell.get("value").toString();
					colname = Column.toMap().get("getbyID").get(colid).toString();
				}
				//Row1.put("ColumnName",colname);
				//Row1.put("Columnvalue",colval);
				Row2.put(colname,colval);
				//id= id+1;
			}
			//info Row2;
			Rowmap.put(rowid,Row2);
			// To store the rows with the column name and column value 
			rowid = rowid + 1;
		}
		//info Rowmap;
		nusername = username.distinct();
		if(statusid != 0)
		{
			count = 0;
			//info Rowmap;
			for each  element in Rowmap
			{
				//info element;
				if(element.get(statusname) == "Complete" || element.get(statusname) == "Completed")
				{
					bool = false;
					for each  i in nusername
					{
						if(element.get(AssigneeName) == i)
						{
							bool = true;
							break;
						}
					}
					if(bool == true)
					{
						Assigneename = element.get(AssigneeName);
						info Assigneename;
					}
					else
					{
						continue;
					}
					//info element;
					elements = list();
					if(element.get(TaskName).isNull())
					{
						continue;
					}
					else
					{
						taskname = element.get(TaskName);
						info taskname;
					}
					if(element.get(Duedate).isNull())
					{
						continue;
					}
					else
					{
						date = element.get(Duedate).toDate();
						DateChange = toString(toDate(date,"dd-MMM-yyyy"),"dd/MM/yyyy");
						todays = zoho.currentdate;
						//info todays;
						weekbefore = zoho.currentdate.subWeek(2);
						//info weekbefore;
						if(date >= weekbefore && date <= todays)
						{
							date1 = DateChange;
							info date1;
						}
						else
						{
							continue;
						}
					}
					if(element.get(AssigneeName).isNull())
					{
						Assigneename = "Not Asssigned";
					}
					else
					{
						Assigneename = element.get(AssigneeName);
					}
					flag = 0;
					//info element;
					for each  ele in element
					{
						if(ele == NULL)
						{
							flag = flag + 1;
						}
					}
					//info element;
					if(flag == 6)
					{
						continue;
					}
					else
					{
						if(!element.get(Duedate).isNull())
						{
							date = element.get(Duedate).toDate();
							DateChange = toString(toDate(date,"dd-MMM-yyyy"),"dd/MM/yyyy");
							//info DateChange.toString();
						}
						else
						{
							DateChange = "-";
						}
						if(element.get(AssigneeName).isNull())
						{
							Assigneename = "Not Asssigned";
						}
						else
						{
							Assigneename = element.get(AssigneeName);
						}
						dataList.add("*" + taskname + "*" + " - " + Assigneename);
						count = count + 1;
					}
				}
			}
			if(count == 0)
			{
				slidesList0.put("title","There are no task completed this fortnight :upset: in " + sheetname);
				slidesList.add(slidesList0);
				slidesList0.put("data",dataList);
				response.put("slides",slidesList);
				response.put("text","# Fortnight Report :report:");
				//info response;
				//------------------->change to the bot uniquename
				zoho.cliq.postToBot("smartsheetz",response);
			}
			else if(count > 0)
			{
				slidesList0.put("title","There are " + count + " tasks completed in " + sheetname);
				slidesList0.put("data",dataList);
				slidesList.add(slidesList0);
				response.put("slides",slidesList);
				response.put("text","# Fortnight Report :report:");
				//-----------------------> change to the bot unique name
				zoho.cliq.postToBot("smartsheetz",response);
			}
			info response;
		}
	}
}
]]></script>
</executor>
</executors>
<id>4878936000000111021</id>
<scheduler_props>
<zone><![CDATA[Asia/Kolkata]]></zone>
<type><![CDATA[MONTHLY]]></type>
<time><![CDATA[21,0,0]]></time>
<days><![CDATA[14,28]]></days>
</scheduler_props>
</scheduler>
<scheduler>
<name>Weekly report</name>
<description><![CDATA[Gives the completed task in the channel and bot]]></description>
<executors>
<executor>
<handlertype>5000</handlertype>
<type>0</type>
<script><![CDATA[r = Map();
response_mapn = zoho.cliq.getRecords("notifications");
//info response_mapn;
useremail = invokeurl
[
	url :"https://api.smartsheet.com/2.0/users/me"
	type :GET
	connection:"test1"
];
emailid = useremail.get("email");
//info emailid;
//info response_mapn;
if(response_mapn.get("status").equalsIgnoreCase("SUCCESS") && response_mapn.get("list").size() > 0)
{
	for each  element in response_mapn.get("list")
	{
		//info element;
		response = Map();
		bot = Map();
		bot.put("name","SmartSheet");
		bot.put("image","https://pbs.twimg.com/profile_images/1169389893744676865/172Rpj-E_400x400.jpg");
		response.put("bot",bot);
		slidesList = list();
		slidesList0 = Map();
		slidesList0.put("type","list");
		dataList = list();
		channelname = element.get("uniquename");
		sheetname = element.get("sheetname");
		//info sheetname;
		sheetid = element.get("sheetid");
		//info sheetid;
		query_mapt = Map();
		//892069314094980_ Webhooks
		//info response_mapt;
		//info response_mapt.get("list").get(0);
		r = Map();
		sections = list();
		username = list();
		// --------->Gets the data from Default Id DB
		//info defaultids;
		// ---------->Gets the data from Equivalent
		fieldval1 = sheetid + "_ Webhooks";
		query_mapt = Map();
		criteria_stringt = "userid==" + user.get("id") + " && field==" + fieldval1;
		query_mapt.put("criteria",criteria_stringt);
		EquivalentColumns = zoho.cliq.getRecords("equivalentcolumns",query_mapt).get("list").get(0);
		//info EquivalentColumns;
		taskid = EquivalentColumns.get("taskid");
		taskname = EquivalentColumns.get("task");
		assigneeid = EquivalentColumns.get("assigneeid");
		statusname = EquivalentColumns.get("status");
		statusid = EquivalentColumns.get("statusid");
		// -------------> Gets the data from Additional Columns
		query_mapw = Map();
		criteria_stringw = "userid==" + user.get("id") + " && field==" + fieldval1;
		query_mapw.put("criteria",criteria_stringw);
		AdditionalColumns = zoho.cliq.getRecords("additionalfields",query_mapw).get("list").get(0);
		notesname = AdditionalColumns.get("notes");
		notesid = AdditionalColumns.get("notesid");
		addval = List();
		if(AdditionalColumns.get("addone") != "NULL")
		{
			addval.add(AdditionalColumns.get("addone"));
		}
		if(AdditionalColumns.get("addtwo") != "NULL")
		{
			addval.add(AdditionalColumns.get("addtwo"));
		}
		if(AdditionalColumns.get("addthree") != "NULL")
		{
			addval.add(AdditionalColumns.get("addthree"));
		}
		//info addval;
		l = Map();
		response1 = invokeurl
		[
			url :"https://api.smartsheet.com/2.0/sheets/" + sheetid
			type :GET
			connection:"test1"
		];
		//info response1;
		rowmap = Map();
		for each  element in response1.get("rows")
		{
			rowid = element.get("id");
			for each  ele in element.get("cells")
			{
				//info ele;
				if(ele.get("columnId") == taskid && !isNull(ele.get("value")))
				{
					taskequivalentname = ele.get("value");
					rowmap.put(taskequivalentname,rowid);
				}
			}
		}
		//info rowmap;
		Column = Map();
		ColumnName = Map();
		ColumnId = Map();
		//To make permalink in the view button of the widget
		for each  column in response1.get("columns")
		{
			columnid = column.get("id");
			columname = column.get("title");
			ColumnName.put(columname,columnid);
			//To get the id of the column using the name
			ColumnId.put(columnid,columname);
			//To get the name of the column using the column id
		}
		Column = {"getbyName":ColumnName,"getbyID":ColumnId};
		//info Column;
		Rowmap = Map();
		rowid = 1;
		list = List();
		WidgetColumnID = Column.get("getbyID");
		//info WidgetColumnID;
		TaskID = EquivalentColumns.get("taskid");
		Duedate = EquivalentColumns.get("duedate");
		AssigneeName = EquivalentColumns.get("assignee");
		TaskName = EquivalentColumns.get("task");
		//info user.get("email");
		list.add(TaskName);
		list.add(Duedate);
		list.add(AssigneeName);
		//info list;
		count = 0;
		for each  row in response1.get("rows")
		{
			//info row;
			Row2 = Map();
			for each  cell in row.get("cells")
			{
				Row1 = Map();
				if(cell.get("columnId") == assigneeid)
				{
					colid = cell.get("columnId").toNumber();
					if(cell.get("value") == emailid)
					{
						//info user.get("email");
						count = count + 1;
						username.add(cell.get("displayValue"));
					}
					colval = cell.get("displayValue").toString();
					colname = Column.toMap().get("getbyID").get(colid).toString();
				}
				else
				{
					colid = cell.get("columnId").toNumber();
					colval = cell.get("value").toString();
					colname = Column.toMap().get("getbyID").get(colid).toString();
				}
				//Row1.put("ColumnName",colname);
				//Row1.put("Columnvalue",colval);
				Row2.put(colname,colval);
				//id= id+1;
			}
			//info Row2;
			Rowmap.put(rowid,Row2);
			// To store the rows with the column name and column value 
			rowid = rowid + 1;
		}
		//info Rowmap;
		if(statusid != 0)
		{
			count = 0;
			//info Rowmap;
			for each  element in Rowmap
			{
				info element;
				if(element.get(statusname) == "Complete" || element.get(statusname) == "Completed")
				{
					//info element;
					elements = list();
					if(element.get(TaskName).isNull())
					{
						continue;
					}
					else
					{
						taskname = element.get(TaskName);
						//info taskname;
					}
					if(element.get(Duedate).isNull())
					{
						continue;
					}
					else
					{
						date = element.get(Duedate).toDate();
						DateChange = toString(toDate(date,"dd-MMM-yyyy"),"dd/MM/yyyy");
						todays = zoho.currentdate;
						info todays;
						weekbefore = zoho.currentdate.subWeek(2);
						info weekbefore;
						if(date >= weekbefore && date <= todays)
						{
							date1 = DateChange;
							info date1;
						}
						else
						{
							continue;
						}
					}
					if(element.get(AssigneeName).isNull())
					{
						Assigneename = "Not Asssigned";
					}
					else
					{
						Assigneename = element.get(AssigneeName);
					}
					flag = 0;
					//info element;
					for each  ele in element
					{
						if(ele == NULL)
						{
							flag = flag + 1;
						}
					}
					//info element;
					if(flag == 6)
					{
						continue;
					}
					else
					{
						if(!element.get(Duedate).isNull())
						{
							date = element.get(Duedate).toDate();
							DateChange = toString(toDate(date,"dd-MMM-yyyy"),"dd/MM/yyyy");
							//info DateChange.toString();
						}
						else
						{
							DateChange = "-";
						}
						if(element.get(AssigneeName).isNull())
						{
							Assigneename = "Not Asssigned";
						}
						else
						{
							Assigneename = element.get(AssigneeName);
						}
						dataList.add("*" + taskname + "*" + " - " + Assigneename);
						count = count + 1;
					}
				}
			}
			info dataList;
			if(count == 0)
			{
				slidesList0.put("title","There are no task completed this fortnight in " + sheetname + " :upset: ");
				slidesList.add(slidesList0);
				slidesList0.put("data",dataList);
				response.put("slides",slidesList);
				response.put("text","# Fortnight Report :report:");
				//info response;
				zoho.cliq.postToChannel(channelname,response);
			}
			else if(count > 0)
			{
				slidesList0.put("title","There are " + count + " tasks completed in " + sheetname + " !");
				slidesList0.put("data",dataList);
				slidesList.add(slidesList0);
				response.put("slides",slidesList);
				response.put("text","# Fortnight Report :report:");
				zoho.cliq.postToChannel(channelname,response);
			}
			info response;
		}
	}
}
]]></script>
</executor>
</executors>
<id>4878936000000106153</id>
<scheduler_props>
<zone><![CDATA[Asia/Kolkata]]></zone>
<type><![CDATA[MONTHLY]]></type>
<time><![CDATA[21,0,0]]></time>
<days><![CDATA[14,28]]></days>
</scheduler_props>
</scheduler>
</schedulers>
<platformdatabases>
<platformdatabase>
<name>additionalfields</name>
<id>4878936000000124027</id>
<description><![CDATA[Stores the not mandatory fields in configure Button]]></description>
<display_name><![CDATA[Additional Fields]]></display_name>
<storage_props><![CDATA[{"UK":[]}]]></storage_props>
<platformdbfields>
<platformdbfield>
<field_name>addoneid</field_name>
<display_name>Additional 1 ID</display_name>
<column_index>302</column_index>
<type>200</type>
<default_value>0</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950670</field_id>
</platformdbfield>
<platformdbfield>
<field_name>notesid</field_name>
<display_name>Notes Equivalent ID</display_name>
<column_index>301</column_index>
<type>200</type>
<default_value>0</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950671</field_id>
</platformdbfield>
<platformdbfield>
<field_name>userid</field_name>
<display_name>Userid</display_name>
<column_index>305</column_index>
<type>200</type>
<default_value>0</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950672</field_id>
</platformdbfield>
<platformdbfield>
<field_name>addone</field_name>
<display_name>Additional1</display_name>
<column_index>202</column_index>
<type>100</type>
<default_value>NULL</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950673</field_id>
</platformdbfield>
<platformdbfield>
<field_name>notes</field_name>
<display_name>Notes Equivalent</display_name>
<column_index>201</column_index>
<type>100</type>
<default_value>NULL</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950674</field_id>
</platformdbfield>
<platformdbfield>
<field_name>addthree</field_name>
<display_name>Additional 3</display_name>
<column_index>204</column_index>
<type>100</type>
<default_value>NULL</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950675</field_id>
</platformdbfield>
<platformdbfield>
<field_name>addtwoid</field_name>
<display_name>Additional 2 ID</display_name>
<column_index>303</column_index>
<type>200</type>
<default_value>0</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950676</field_id>
</platformdbfield>
<platformdbfield>
<field_name>field</field_name>
<display_name>Field</display_name>
<column_index>205</column_index>
<type>100</type>
<default_value>NULL</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950677</field_id>
</platformdbfield>
<platformdbfield>
<field_name>addthreeid</field_name>
<display_name>Additional 3 ID</display_name>
<column_index>304</column_index>
<type>200</type>
<default_value>0</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950678</field_id>
</platformdbfield>
<platformdbfield>
<field_name>addtwo</field_name>
<display_name>Additional 2</display_name>
<column_index>203</column_index>
<type>100</type>
<default_value>NULL</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950679</field_id>
</platformdbfield>
</platformdbfields>
</platformdatabase>
<platformdatabase>
<name>defaultiddb</name>
<id>4878936000000124033</id>
<description><![CDATA[Stores the Default ID of the Workspace, Sheet and Webhook Ids]]></description>
<display_name><![CDATA[Default Id]]></display_name>
<storage_props><![CDATA[{"UK":[]}]]></storage_props>
<platformdbfields>
<platformdbfield>
<field_name>workspacename</field_name>
<display_name>Workspace Name</display_name>
<column_index>201</column_index>
<type>100</type>
<default_value>NULL</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950890</field_id>
</platformdbfield>
<platformdbfield>
<field_name>workspaceid</field_name>
<display_name>Workspcae ID</display_name>
<column_index>301</column_index>
<type>200</type>
<default_value>0</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950891</field_id>
</platformdbfield>
<platformdbfield>
<field_name>userid</field_name>
<display_name>Userid</display_name>
<column_index>303</column_index>
<type>200</type>
<default_value>0</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950892</field_id>
</platformdbfield>
<platformdbfield>
<field_name>sheetid</field_name>
<display_name>Sheet ID</display_name>
<column_index>302</column_index>
<type>200</type>
<default_value>0</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950893</field_id>
</platformdbfield>
<platformdbfield>
<field_name>sheetname</field_name>
<display_name>Sheet Name</display_name>
<column_index>202</column_index>
<type>100</type>
<default_value>NULL</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950894</field_id>
</platformdbfield>
</platformdbfields>
</platformdatabase>
<platformdatabase>
<name>equivalentcolumns</name>
<id>4878936000000124029</id>
<description><![CDATA[To get the equivalent  columns for widgets]]></description>
<display_name><![CDATA[Equivalent Columns]]></display_name>
<storage_props><![CDATA[{"UK":[]}]]></storage_props>
<platformdbfields>
<platformdbfield>
<field_name>task</field_name>
<display_name>Task Equivalent</display_name>
<column_index>201</column_index>
<type>100</type>
<default_value>NULL</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950740</field_id>
</platformdbfield>
<platformdbfield>
<field_name>status</field_name>
<display_name>Status Equivalent</display_name>
<column_index>203</column_index>
<type>100</type>
<default_value>NULL</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950741</field_id>
</platformdbfield>
<platformdbfield>
<field_name>userid</field_name>
<display_name>Userid</display_name>
<column_index>305</column_index>
<type>200</type>
<default_value>0</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950742</field_id>
</platformdbfield>
<platformdbfield>
<field_name>taskid</field_name>
<display_name>Task Equivalent ID</display_name>
<column_index>301</column_index>
<type>200</type>
<default_value>0</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950743</field_id>
</platformdbfield>
<platformdbfield>
<field_name>statusid</field_name>
<display_name>Status Equivalent ID</display_name>
<column_index>303</column_index>
<type>200</type>
<default_value>0</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950744</field_id>
</platformdbfield>
<platformdbfield>
<field_name>duedate</field_name>
<display_name>Due Date Equivalent</display_name>
<column_index>202</column_index>
<type>100</type>
<default_value>NULL</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950745</field_id>
</platformdbfield>
<platformdbfield>
<field_name>assignee</field_name>
<display_name>Assignee Equivalent</display_name>
<column_index>204</column_index>
<type>100</type>
<default_value>NULL</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950746</field_id>
</platformdbfield>
<platformdbfield>
<field_name>assigneeid</field_name>
<display_name>Assignee Equivalent ID</display_name>
<column_index>304</column_index>
<type>200</type>
<default_value>0</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950747</field_id>
</platformdbfield>
<platformdbfield>
<field_name>field</field_name>
<display_name>Field</display_name>
<column_index>205</column_index>
<type>100</type>
<default_value>NULL</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950748</field_id>
</platformdbfield>
<platformdbfield>
<field_name>duedateid</field_name>
<display_name>Due Date Equivalent ID</display_name>
<column_index>302</column_index>
<type>200</type>
<default_value>0</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950749</field_id>
</platformdbfield>
</platformdbfields>
</platformdatabase>
<platformdatabase>
<name>notifications</name>
<id>4878936000000124031</id>
<description><![CDATA[Stores the Channel name and details and Webhooks details]]></description>
<display_name><![CDATA[Notifications]]></display_name>
<storage_props><![CDATA[{"UK":[]}]]></storage_props>
<platformdbfields>
<platformdbfield>
<field_name>webhookid</field_name>
<display_name>Webhook ID</display_name>
<column_index>302</column_index>
<type>200</type>
<default_value>0</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950800</field_id>
</platformdbfield>
<platformdbfield>
<field_name>sheetid</field_name>
<display_name>Sheet ID</display_name>
<column_index>301</column_index>
<type>200</type>
<default_value>0</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950801</field_id>
</platformdbfield>
<platformdbfield>
<field_name>selectedfields</field_name>
<display_name>Selected Fields</display_name>
<column_index>204</column_index>
<type>100</type>
<default_value>NULL</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950802</field_id>
</platformdbfield>
<platformdbfield>
<field_name>uniquename</field_name>
<display_name>Channel Unique Name</display_name>
<column_index>202</column_index>
<type>100</type>
<default_value>NULL</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950803</field_id>
</platformdbfield>
<platformdbfield>
<field_name>user</field_name>
<display_name>Username</display_name>
<column_index>205</column_index>
<type>100</type>
<default_value>NULL</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950804</field_id>
</platformdbfield>
<platformdbfield>
<field_name>userid</field_name>
<display_name>User ID</display_name>
<column_index>303</column_index>
<type>200</type>
<default_value>0</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950805</field_id>
</platformdbfield>
<platformdbfield>
<field_name>channelname</field_name>
<display_name>Channel Name</display_name>
<column_index>201</column_index>
<type>100</type>
<default_value>NULL</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950806</field_id>
</platformdbfield>
<platformdbfield>
<field_name>enabled</field_name>
<display_name>Webhook Status</display_name>
<column_index>101</column_index>
<type>0</type>
<default_value>FALSE</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950807</field_id>
</platformdbfield>
<platformdbfield>
<field_name>sheetname</field_name>
<display_name>Sheet Name</display_name>
<column_index>203</column_index>
<type>100</type>
<default_value>NULL</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519781950808</field_id>
</platformdbfield>
</platformdbfields>
</platformdatabase>
<platformdatabase>
<name>weebhookkey</name>
<id>4878936000000124037</id>
<description><![CDATA[To store the webhooks token details]]></description>
<display_name><![CDATA[Zapi Keys]]></display_name>
<storage_props><![CDATA[{"UK":[]}]]></storage_props>
<platformdbfields>
<platformdbfield>
<field_name>userid</field_name>
<display_name>User ID</display_name>
<column_index>301</column_index>
<type>200</type>
<default_value>0</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519792135000</field_id>
</platformdbfield>
<platformdbfield>
<field_name>zapikey</field_name>
<display_name>ZAPI Key</display_name>
<column_index>201</column_index>
<type>100</type>
<default_value>NULL</default_value>
<mandatory>false</mandatory>
<masked>false</masked>
<field_id>17202824105416519792135001</field_id>
</platformdbfield>
</platformdbfields>
</platformdatabase>
</platformdatabases>
</extension>
</extensions>